{"version":3,"file":"main-C5d3rF6b.js","sources":["../../static/main.ts","../../templates/index.html?html-proxy&index=0.js","../../src/components/practiceHistory.ts"],"sourcesContent":["import type { Question, QuestionBank, BankData } from '@/types/question';\nimport { formatBankName } from '@/utils/bankNames';\nimport { evaluateAnswer, getCorrectAnswerText, formatExplanation } from '@/utils/answers';\nimport { banks } from './banks';\nimport { questionRenderer } from './question_renderer';\n\nconst bankFiles: QuestionBank = banks;\nlet banksPopulated = false;\n\n// Add event handlers for question buttons\nlet currentQuestion: Question | null = null;\n\n// Make utility functions globally available for questionRenderer\n(window as any).evaluateAnswer = evaluateAnswer;\n(window as any).getCorrectAnswerText = getCorrectAnswerText;\n(window as any).formatExplanation = formatExplanation;\n\nexport function init(): void {\n  const loadBtn = document.getElementById('loadBtn') as HTMLButtonElement | null;\n  if (loadBtn) {\n    loadBtn.addEventListener('click', loadQuestion);\n  }\n\n  const practiceBtn = document.getElementById('practiceBtn') as HTMLButtonElement | null;\n  if (practiceBtn) {\n    practiceBtn.addEventListener('click', startPractice);\n  }\n\n  const checkBtn = document.getElementById('checkBtn') as HTMLButtonElement | null;\n  if (checkBtn) {\n    checkBtn.addEventListener('click', toggleCheck);\n  }\n\n  const revealBtn = document.getElementById('revealBtn') as HTMLButtonElement | null;\n  if (revealBtn) {\n    revealBtn.addEventListener('click', toggleReveal);\n  }\n\n  const statsModal = document.getElementById('statsModal');\n  if (statsModal) {\n    statsModal.classList.remove('show');\n  }\n\n  const params = new URLSearchParams(window.location.search);\n  if (params.get('isStandAlone') === 'true') {\n    document.body.classList.add('standalone');\n    const container = document.querySelector('.container');\n    if (container) {\n      container.classList.add('standalone');\n    }\n  }\n\n  populateBankSelects(bankFiles);\n\n  try {\n    const last = localStorage.getItem('lastBank');\n    if (last) {\n      const bankSelect = document.getElementById('bankSelect') as HTMLSelectElement | null;\n      if (bankSelect && bankFiles[last]) {\n        bankSelect.value = last;\n      }\n    }\n  } catch (e) {\n    console.warn('Failed to load lastBank', e);\n  }\n\n  questionRenderer.initPdfViewer();\n}\n\nfunction populateBankSelects(data: QuestionBank): void {\n  // Prevent duplicate population\n  if (banksPopulated) {\n    return;\n  }\n\n  const bankSelect = document.getElementById(\n    'bankSelect'\n  ) as HTMLSelectElement | null;\n  const statsSelect = document.getElementById(\n    'statsBankSelect'\n  ) as HTMLSelectElement | null;\n\n  if (!bankSelect && !statsSelect) {\n    console.warn('Bank select elements not found');\n    return;\n  }\n\n  const names = Object.keys(data)\n    .filter(k => Array.isArray(data[k]))\n    .sort();\n\n  names.forEach(name => {\n    if (bankSelect) {\n      const opt1 = document.createElement('option');\n      opt1.value = name;\n      opt1.textContent = formatBankName(name);\n      bankSelect.appendChild(opt1);\n    }\n    if (statsSelect) {\n      const opt2 = document.createElement('option');\n      opt2.value = name;\n      opt2.textContent = formatBankName(name);\n      statsSelect.appendChild(opt2);\n    }\n  });\n\n  // Mark as populated to prevent duplicates\n  banksPopulated = true;\n}\n\nfunction getSelectedBank(id: string): BankData | null {\n  const sel = document.getElementById(id) as HTMLSelectElement | null;\n  if (!sel) {\n    return null;\n  }\n\n  const bank = sel.value;\n  if (!bank) {\n    return null;\n  }\n\n  const files = bankFiles[bank];\n  if (!Array.isArray(files) || !files.length) {\n    return null;\n  }\n\n  return { bank, files };\n}\n\n\nfunction loadQuestion(): void {\n  const data = getSelectedBank('bankSelect');\n  if (!data) {\n    alert('Please select a question bank');\n    return;\n  }\n\n  const qs = data.files[Math.floor(Math.random() * data.files.length)];\n  const q = qs[Math.floor(Math.random() * qs.length)];\n  renderQuestion(q);\n}\n\nfunction renderQuestion(question: Question): void {\n  // Store current question for button actions\n  currentQuestion = question;\n\n  // Store the selected bank for next time\n  try {\n    const bankSelect = document.getElementById(\n      'bankSelect'\n    ) as HTMLSelectElement | null;\n    if (bankSelect && bankSelect.value) {\n      localStorage.setItem('lastBank', bankSelect.value);\n    }\n  } catch (e) {\n    console.warn('Failed to save lastBank', e);\n  }\n\n  // Render the question using the question renderer\n  if (questionRenderer) {\n    questionRenderer.renderQuestion(question, {\n      text: '#qText',\n      title: '#qTitle',\n      img: '#qImg',\n      options: '#answerOptions',\n      input: '.calculator',\n      unit: '#answerUnit',\n      feedback: '#feedback',\n      answer: '#answer',\n      explanation: '#explanation',\n    });\n  }\n\n  // Show the question area\n  const questionArea = document.getElementById('questionArea');\n  if (questionArea) {\n    questionArea.style.display = 'block';\n  }\n\n  // Reset feedback and buttons\n  const feedbackEl = document.getElementById('feedback');\n  if (feedbackEl) {\n    feedbackEl.textContent = '';\n    feedbackEl.classList.remove('correct', 'incorrect');\n  }\n\n  // Reset answer and explanation visibility\n  const answerEl = document.getElementById('answer');\n  const explanationEl = document.getElementById('explanation');\n  if (answerEl) {\n    answerEl.style.display = 'none';\n    answerEl.innerHTML = '';\n  }\n  if (explanationEl) {\n    explanationEl.style.display = 'none';\n    explanationEl.innerHTML = '';\n  }\n\n\n}\n\nfunction startPractice(): void {\n  const data = getSelectedBank('bankSelect');\n  if (!data) {\n    alert('Please select a question bank');\n    return;\n  }\n\n  // Get number of questions\n  const numInput = document.getElementById('numInput') as HTMLInputElement;\n  const numQuestions = numInput ? parseInt(numInput.value) || 10 : 10;\n\n  // Check for existing session\n  const sessionKey = `practice_session_${data.bank}_${numQuestions}`;\n  const existingSession = sessionStorage.getItem(sessionKey);\n\n  if (existingSession) {\n    const confirmResume = confirm(\n      'You have an unfinished practice session for this bank. Would you like to resume where you left off?'\n    );\n    if (confirmResume) {\n      window.location.href = `practice.html?bank=${encodeURIComponent(data.bank)}&num=${numQuestions}&resume=true`;\n      return;\n    } else {\n      // User wants to start fresh, clear the old session\n      sessionStorage.removeItem(sessionKey);\n    }\n  }\n\n  // Store the selected bank for next time\n  try {\n    localStorage.setItem('lastBank', data.bank);\n  } catch (e) {\n    console.warn('Failed to save lastBank', e);\n  }\n\n  // Redirect to practice page with bank and number parameters\n  window.location.href = `practice.html?bank=${encodeURIComponent(data.bank)}&num=${numQuestions}`;\n}\n\nfunction getUserAnswer(): string {\n  if (!currentQuestion) {\n    return '';\n  }\n\n  if (currentQuestion.is_calculation) {\n    const calcInput = document.getElementById('calcInput') as HTMLInputElement;\n    return calcInput?.value || '';\n  } else {\n    const selectedOption = document.querySelector(\n      'input[name=\"answer\"]:checked'\n    ) as HTMLInputElement;\n    return selectedOption?.value || '';\n  }\n}\n\nfunction toggleCheck(): void {\n  if (!currentQuestion || !questionRenderer) {\n    return;\n  }\n  \n  const currentState = questionRenderer.getCurrentDisplayState();\n  \n  if (currentState === 'checked') {\n    questionRenderer.displayAnswer(currentQuestion, 'hide');\n  } else {\n    const userAnswer = getUserAnswer();\n    questionRenderer.displayAnswer(currentQuestion, 'check', userAnswer);\n  }\n}\n\nfunction toggleReveal(): void {\n  if (!currentQuestion || !questionRenderer) {\n    return;\n  }\n  \n  const currentState = questionRenderer.getCurrentDisplayState();\n  \n  if (currentState === 'revealed') {\n    questionRenderer.displayAnswer(currentQuestion, 'hide');\n  } else {\n    questionRenderer.displayAnswer(currentQuestion, 'reveal');\n  }\n}\n\n\n","\n    import { init } from '/static/main.ts';\n    import { PracticeHistoryComponent } from '/src/components/practiceHistory.ts';\n    init();\n    const practiceHistory = new PracticeHistoryComponent();\n    practiceHistory.render('practiceHistory');\n  ","import { EMPTY_HISTORY } from '../utils/history';\nimport type { PracticeHistory, PracticeResult } from '@/types/question';\n\nexport class PracticeHistoryComponent {\n  private container: HTMLDivElement | null;\n  private history: PracticeHistory;\n\n  constructor() {\n    this.container = null;\n    this.history = this.getPracticeHistory();\n  }\n\n  render(containerId: string): void {\n    this.container = document.getElementById(containerId) as HTMLDivElement | null;\n    if (!this.container) {\n      console.warn('Practice history container not found:', containerId);\n      return;\n    }\n\n    this.container.innerHTML = this.generateHTML();\n    this.attachEventListeners();\n  }\n\n  private generateHTML(): string {\n    if (this.history.totalTests === 0) {\n      return `\n        <div class=\"practice-history-empty\">\n          <div class=\"empty-state\">\n            <div class=\"empty-icon\">ðŸ“Š</div>\n            <h3>No Practice Tests Yet</h3>\n            <p>Complete your first practice test to see your results here!</p>\n            <button class=\"btn btn-primary\" id=\"startFirstTest\">Start Your First Test</button>\n          </div>\n        </div>\n      `;\n    }\n\n    return `\n      <div class=\"practice-history\">\n        <div class=\"history-header\">\n          <h2>ðŸ“Š Practice Test History</h2>\n          <button class=\"btn btn-secondary btn-sm\" id=\"clearHistory\">Clear History</button>\n        </div>\n\n        <div class=\"history-stats\">\n          <div class=\"stat-card\">\n            <div class=\"stat-number\">${this.history.totalTests}</div>\n            <div class=\"stat-label\">Total Tests</div>\n          </div>\n          <div class=\"stat-card\">\n            <div class=\"stat-number\">${this.history.averageScore}%</div>\n            <div class=\"stat-label\">Average Score</div>\n          </div>\n          <div class=\"stat-card\">\n            <div class=\"stat-number\">${this.history.bestScore}%</div>\n            <div class=\"stat-label\">Best Score</div>\n          </div>\n          <div class=\"stat-card\">\n            <div class=\"stat-number\">${Math.round(this.history.totalTime)}m</div>\n            <div class=\"stat-label\">Total Time</div>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  private attachEventListeners(): void {\n    if (!this.container) {\n      return;\n    }\n\n    // Clear history button\n    const clearBtn = this.container.querySelector<HTMLButtonElement>('#clearHistory');\n    if (clearBtn) {\n      clearBtn.addEventListener('click', () => {\n        if (confirm('Are you sure you want to clear all practice history? This cannot be undone.')) {\n          this.clearPracticeHistory();\n          this.history = this.getPracticeHistory();\n          this.render(this.container!.id);\n        }\n      });\n    }\n\n    // Start first test button\n    const startFirstBtn = this.container.querySelector<HTMLButtonElement>('#startFirstTest');\n    if (startFirstBtn) {\n      startFirstBtn.addEventListener('click', () => {\n        const practiceBtn = document.getElementById('practiceBtn') as HTMLButtonElement | null;\n        if (practiceBtn) {\n          practiceBtn.scrollIntoView({ behavior: 'smooth' });\n        }\n      });\n    }\n  }\n\n  // Storage methods\n  private getPracticeHistory(): PracticeHistory {\n    try {\n      const history = localStorage.getItem('practice_history');\n      if (!history) {\n        return { ...EMPTY_HISTORY };\n      }\n\n      const parsedHistory = JSON.parse(history);\n      return this.calculateHistoryStats(parsedHistory.results || []);\n    } catch (error) {\n      console.warn('Failed to load practice history:', error);\n      return { ...EMPTY_HISTORY };\n    }\n  }\n\n  private calculateHistoryStats(results: PracticeResult[]): PracticeHistory {\n    const totalTests = results.length;\n    const totalScore = results.reduce((sum, result) => sum + result.score, 0);\n    const averageScore = totalTests > 0 ? Math.round((totalScore / totalTests) * 100) / 100 : 0;\n    const bestScore = results.length > 0 ? Math.max(...results.map(r => r.score)) : 0;\n    const totalTime = results.reduce((sum, result) => sum + result.duration, 0);\n\n    return {\n      results,\n      totalTests,\n      averageScore,\n      bestScore,\n      totalTime,\n    };\n  }\n\n  private clearPracticeHistory(): void {\n    try {\n      localStorage.removeItem('practice_history');\n      this.history = { ...EMPTY_HISTORY };\n    } catch (error) {\n      console.warn('Failed to clear practice history:', error);\n    }\n  }\n\n  refresh(): void {\n    this.history = this.getPracticeHistory();\n    if (this.container) {\n      this.render(this.container.id);\n    }\n  }\n}\n"],"names":["bankFiles","banks","banksPopulated","currentQuestion","getSelectedBank","id","sel","document","getElementById","bank","value","files","Array","isArray","length","loadQuestion","data","alert","qs","Math","floor","random","question","bankSelect","localStorage","setItem","e","console","warn","questionRenderer","renderQuestion","text","title","img","options","input","unit","feedback","answer","explanation","questionArea","style","display","feedbackEl","textContent","classList","remove","answerEl","explanationEl","innerHTML","startPractice","numInput","numQuestions","parseInt","sessionKey","concat","sessionStorage","getItem","confirm","window","location","href","encodeURIComponent","removeItem","toggleCheck","getCurrentDisplayState","displayAnswer","userAnswer","is_calculation","calcInput","selectedOption","querySelector","getUserAnswer","toggleReveal","evaluateAnswer","getCorrectAnswerText","formatExplanation","loadBtn","addEventListener","practiceBtn","checkBtn","revealBtn","statsModal","URLSearchParams","search","get","body","add","container","statsSelect","Object","keys","filter","k","sort","forEach","name","opt1","createElement","formatBankName","appendChild","opt2","populateBankSelects","last","initPdfViewer","init","constructor","__publicField","this","history","getPracticeHistory","render","containerId","generateHTML","attachEventListeners","totalTests","averageScore","bestScore","round","totalTime","clearBtn","clearPracticeHistory","startFirstBtn","scrollIntoView","behavior","EMPTY_HISTORY","parsedHistory","JSON","parse","calculateHistoryStats","results","error","totalScore","reduce","sum","result","score","max","map","r","duration","refresh"],"mappings":"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"}