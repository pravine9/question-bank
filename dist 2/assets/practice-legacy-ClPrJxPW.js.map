{"version":3,"file":"practice-legacy-ClPrJxPW.js","sources":["../../node_modules/easytimer.js/dist/easytimer.js","../../src/utils/timer.ts","../../static/practice.ts","../../templates/practice.html?html-proxy&index=0.js"],"sourcesContent":["/**\n * easytimer.js\n * Generated: 2023-08-28\n * Version: 4.6.0\n */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.easytimer = {}));\n})(this, (function (exports) { 'use strict';\n\n  function ownKeys(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n      var o = Object.getOwnPropertySymbols(e);\n      r && (o = o.filter(function (r) {\n        return Object.getOwnPropertyDescriptor(e, r).enumerable;\n      })), t.push.apply(t, o);\n    }\n    return t;\n  }\n  function _objectSpread2(e) {\n    for (var r = 1; r < arguments.length; r++) {\n      var t = null != arguments[r] ? arguments[r] : {};\n      r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n        _defineProperty(e, r, t[r]);\n      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n        Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n      });\n    }\n    return e;\n  }\n  function _typeof(o) {\n    \"@babel/helpers - typeof\";\n\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n      return typeof o;\n    } : function (o) {\n      return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n  }\n  function _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n    return obj;\n  }\n  function _toPrimitive(input, hint) {\n    if (typeof input !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n      var res = prim.call(input, hint || \"default\");\n      if (typeof res !== \"object\") return res;\n      throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n  }\n  function _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return typeof key === \"symbol\" ? key : String(key);\n  }\n\n  function leftPadding(string, padLength, character) {\n    var i;\n    var characters = '';\n    string = typeof string === 'number' ? String(string) : string;\n    if (string.length > padLength) {\n      return string;\n    }\n    for (i = 0; i < padLength; i = i + 1) {\n      characters += String(character);\n    }\n    return (characters + string).slice(-characters.length);\n  }\n\n  function TimeCounter() {\n    this.reset();\n  }\n\n  /**\n   * [toString convert the counted values on a string]\n   * @param  {array} units           [array with the units to display]\n   * @param  {string} separator       [separator of the units]\n   * @param  {number} leftZeroPadding [number of zero padding]\n   * @return {string}                 [result string]\n   */\n  TimeCounter.prototype.toString = function () {\n    var units = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['hours', 'minutes', 'seconds'];\n    var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ':';\n    var leftZeroPadding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;\n    units = units || ['hours', 'minutes', 'seconds'];\n    separator = separator || ':';\n    leftZeroPadding = leftZeroPadding || 2;\n    var arrayTime = [];\n    var i;\n    for (i = 0; i < units.length; i = i + 1) {\n      if (this[units[i]] !== undefined) {\n        if (units[i] === 'secondTenths') {\n          arrayTime.push(this[units[i]]);\n        } else {\n          arrayTime.push(leftPadding(this[units[i]], leftZeroPadding, '0'));\n        }\n      }\n    }\n    return arrayTime.join(separator);\n  };\n\n  /**\n   * [reset reset counter]\n   */\n  TimeCounter.prototype.reset = function () {\n    this.secondTenths = 0;\n    this.seconds = 0;\n    this.minutes = 0;\n    this.hours = 0;\n    this.days = 0;\n  };\n\n  function EventEmitter() {\n    this.events = {};\n  }\n  EventEmitter.prototype.on = function (event, listener) {\n    var _this = this;\n    if (!Array.isArray(this.events[event])) {\n      this.events[event] = [];\n    }\n    this.events[event].push(listener);\n    return function () {\n      return _this.removeListener(event, listener);\n    };\n  };\n  EventEmitter.prototype.removeListener = function (event, listener) {\n    if (Array.isArray(this.events[event])) {\n      var eventIndex = this.events[event].indexOf(listener);\n      if (eventIndex > -1) {\n        this.events[event].splice(eventIndex, 1);\n      }\n    }\n  };\n  EventEmitter.prototype.removeAllListeners = function (event) {\n    if (!event) {\n      this.events = {};\n    } else if (Array.isArray(this.events[event])) {\n      this.events[event] = [];\n    }\n  };\n  EventEmitter.prototype.emit = function (event) {\n    var _this2 = this;\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    if (Array.isArray(this.events[event])) {\n      this.events[event].forEach(function (listener) {\n        return listener.apply(_this2, args);\n      });\n    }\n  };\n\n  /*\n   * General functions, variables and constants\n   */\n  var SECOND_TENTHS_PER_SECOND = 10;\n  var SECONDS_PER_MINUTE = 60;\n  var MINUTES_PER_HOUR = 60;\n  var HOURS_PER_DAY = 24;\n  var SECOND_TENTHS_POSITION = 0;\n  var SECONDS_POSITION = 1;\n  var MINUTES_POSITION = 2;\n  var HOURS_POSITION = 3;\n  var DAYS_POSITION = 4;\n  var SECOND_TENTHS = 'secondTenths';\n  var SECONDS = 'seconds';\n  var MINUTES = 'minutes';\n  var HOURS = 'hours';\n  var DAYS = 'days';\n  var VALID_INPUT_VALUES = [SECOND_TENTHS, SECONDS, MINUTES, HOURS, DAYS];\n  var unitsInMilliseconds = {\n    secondTenths: 100,\n    seconds: 1000,\n    minutes: 60000,\n    hours: 3600000,\n    days: 86400000\n  };\n  var groupedUnits = {\n    secondTenths: SECOND_TENTHS_PER_SECOND,\n    seconds: SECONDS_PER_MINUTE,\n    minutes: MINUTES_PER_HOUR,\n    hours: HOURS_PER_DAY\n  };\n  function mod(number, module) {\n    return (number % module + module) % module;\n  }\n\n  /**\n   * [Timer Timer/Chronometer/Countdown compatible with AMD and NodeJS.\n   * Can update time values with different time intervals: tenth of seconds,\n   * seconds, minutes and hours.]\n   */\n  function Timer() {\n    var defaultParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    /*\n    * PRIVATE variables and Functions\n    */\n    var counters = new TimeCounter();\n    var totalCounters = new TimeCounter();\n    var intervalId;\n    var eventEmitter = new EventEmitter();\n    var running = false;\n    var paused = false;\n    var precision;\n    var timerTypeFactor;\n    var customCallback;\n    var timerConfig = {};\n    var currentParams;\n    var targetValues;\n    var startValues;\n    var countdown;\n    var startingDate;\n    var targetDate;\n    var eventData = {\n      detail: {\n        timer: this\n      }\n    };\n    setParams(defaultParams);\n    function updateCounters(precision, roundedValue) {\n      var unitsPerGroup = groupedUnits[precision];\n      totalCounters[precision] = roundedValue;\n      if (precision === DAYS) {\n        counters[precision] = Math.abs(roundedValue);\n      } else if (roundedValue >= 0) {\n        counters[precision] = mod(roundedValue, unitsPerGroup);\n      } else {\n        counters[precision] = mod(unitsPerGroup - mod(roundedValue, unitsPerGroup), unitsPerGroup);\n      }\n    }\n    function updateDays(value) {\n      return updateUnitByPrecision(value, DAYS);\n    }\n    function updateHours(value) {\n      return updateUnitByPrecision(value, HOURS);\n    }\n    function updateMinutes(value) {\n      return updateUnitByPrecision(value, MINUTES);\n    }\n    function updateSeconds(value) {\n      return updateUnitByPrecision(value, SECONDS);\n    }\n    function updateSecondTenths(value) {\n      return updateUnitByPrecision(value, SECOND_TENTHS);\n    }\n    function updateUnitByPrecision(value, precision) {\n      var previousValue = totalCounters[precision];\n      updateCounters(precision, calculateIntegerUnitQuotient(value, unitsInMilliseconds[precision]));\n      return totalCounters[precision] !== previousValue;\n    }\n    function stopTimerAndResetCounters() {\n      stopTimer();\n      resetCounters();\n    }\n    function stopTimer() {\n      clearInterval(intervalId);\n      intervalId = undefined;\n      running = false;\n      paused = false;\n    }\n    function setParamsAndStartTimer(params) {\n      if (!isPaused()) {\n        setParams(params);\n      } else {\n        startingDate = calculateStartingDate();\n        targetValues = setTarget(currentParams.target);\n      }\n      startTimer();\n    }\n    function startTimer() {\n      var interval = unitsInMilliseconds[precision];\n      if (isTargetAchieved(roundTimestamp(Date.now()))) {\n        return;\n      }\n      intervalId = setInterval(updateTimerAndDispatchEvents, interval);\n      running = true;\n      paused = false;\n    }\n    function calculateStartingDate() {\n      return roundTimestamp(Date.now()) - totalCounters.secondTenths * unitsInMilliseconds[SECOND_TENTHS] * timerTypeFactor;\n    }\n    function updateTimerAndDispatchEvents() {\n      var currentTime = roundTimestamp(Date.now());\n      var valuesUpdated = updateTimer();\n      dispatchEvents(valuesUpdated);\n      customCallback(eventData.detail.timer);\n      if (isTargetAchieved(currentTime)) {\n        stop();\n        dispatchEvent('targetAchieved', eventData);\n      }\n    }\n    function updateTimer() {\n      var currentTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : roundTimestamp(Date.now());\n      var elapsedTime = timerTypeFactor > 0 ? currentTime - startingDate : startingDate - currentTime;\n      var valuesUpdated = {};\n      valuesUpdated[SECOND_TENTHS] = updateSecondTenths(elapsedTime);\n      valuesUpdated[SECONDS] = updateSeconds(elapsedTime);\n      valuesUpdated[MINUTES] = updateMinutes(elapsedTime);\n      valuesUpdated[HOURS] = updateHours(elapsedTime);\n      valuesUpdated[DAYS] = updateDays(elapsedTime);\n      return valuesUpdated;\n    }\n    function roundTimestamp(timestamp) {\n      return Math.floor(timestamp / unitsInMilliseconds[precision]) * unitsInMilliseconds[precision];\n    }\n    function dispatchEvents(valuesUpdated) {\n      if (valuesUpdated[SECOND_TENTHS]) {\n        dispatchEvent('secondTenthsUpdated', eventData);\n      }\n      if (valuesUpdated[SECONDS]) {\n        dispatchEvent('secondsUpdated', eventData);\n      }\n      if (valuesUpdated[MINUTES]) {\n        dispatchEvent('minutesUpdated', eventData);\n      }\n      if (valuesUpdated[HOURS]) {\n        dispatchEvent('hoursUpdated', eventData);\n      }\n      if (valuesUpdated[DAYS]) {\n        dispatchEvent('daysUpdated', eventData);\n      }\n    }\n    function isTargetAchieved(currentDate) {\n      return targetValues instanceof Array && currentDate >= targetDate;\n    }\n    function resetCounters() {\n      counters.reset();\n      totalCounters.reset();\n    }\n    function setParams(params) {\n      params = params || {};\n      precision = checkPrecision(params.precision);\n      customCallback = typeof params.callback === 'function' ? params.callback : function () {};\n      countdown = params.countdown === true;\n      timerTypeFactor = countdown === true ? -1 : 1;\n      if (_typeof(params.startValues) === 'object') {\n        setStartValues(params.startValues);\n      } else {\n        startValues = null;\n      }\n      startingDate = calculateStartingDate();\n      updateTimer();\n      if (_typeof(params.target) === 'object') {\n        targetValues = setTarget(params.target);\n      } else if (countdown) {\n        params.target = {\n          seconds: 0\n        };\n        targetValues = setTarget(params.target);\n      } else {\n        targetValues = null;\n      }\n      timerConfig = {\n        precision: precision,\n        callback: customCallback,\n        countdown: _typeof(params) === 'object' && params.countdown === true,\n        target: targetValues,\n        startValues: startValues\n      };\n      currentParams = params;\n    }\n    function checkPrecision(precision) {\n      precision = typeof precision === 'string' ? precision : SECONDS;\n      if (!isValidInputValue(precision)) {\n        throw new Error(\"Error in precision parameter: \".concat(precision, \" is not a valid value\"));\n      }\n      return precision;\n    }\n    function isValidInputValue(value) {\n      return VALID_INPUT_VALUES.indexOf(value) >= 0;\n    }\n    function configInputValues(inputValues) {\n      var values;\n      if (_typeof(inputValues) === 'object') {\n        if (inputValues instanceof Array) {\n          if (inputValues.length !== 5) {\n            throw new Error('Array size not valid');\n          }\n          values = inputValues;\n        } else {\n          for (var value in inputValues) {\n            if (VALID_INPUT_VALUES.indexOf(value) < 0) {\n              throw new Error(\"Error in startValues or target parameter: \".concat(value, \" is not a valid input value\"));\n            }\n          }\n          values = [inputValues.secondTenths || 0, inputValues.seconds || 0, inputValues.minutes || 0, inputValues.hours || 0, inputValues.days || 0];\n        }\n      }\n      values = values.map(function (value) {\n        return parseInt(value, 10);\n      });\n      var secondTenths = values[SECOND_TENTHS_POSITION];\n      var seconds = values[SECONDS_POSITION] + calculateIntegerUnitQuotient(secondTenths, SECOND_TENTHS_PER_SECOND);\n      var minutes = values[MINUTES_POSITION] + calculateIntegerUnitQuotient(seconds, SECONDS_PER_MINUTE);\n      var hours = values[HOURS_POSITION] + calculateIntegerUnitQuotient(minutes, MINUTES_PER_HOUR);\n      var days = values[DAYS_POSITION] + calculateIntegerUnitQuotient(hours, HOURS_PER_DAY);\n      values[SECOND_TENTHS_POSITION] = secondTenths % SECOND_TENTHS_PER_SECOND;\n      values[SECONDS_POSITION] = seconds % SECONDS_PER_MINUTE;\n      values[MINUTES_POSITION] = minutes % MINUTES_PER_HOUR;\n      values[HOURS_POSITION] = hours % HOURS_PER_DAY;\n      values[DAYS_POSITION] = days;\n      return values;\n    }\n    function calculateIntegerUnitQuotient(unit, divisor) {\n      var quotient = unit / divisor;\n      return quotient < 0 ? Math.ceil(quotient) : Math.floor(quotient);\n    }\n    function setTarget(inputTarget) {\n      if (!inputTarget) {\n        return;\n      }\n      targetValues = configInputValues(inputTarget);\n      var targetCounter = calculateTotalCounterFromValues(targetValues);\n      targetDate = startingDate + targetCounter.secondTenths * unitsInMilliseconds[SECOND_TENTHS] * timerTypeFactor;\n      return targetValues;\n    }\n    function setStartValues(inputStartValues) {\n      startValues = configInputValues(inputStartValues);\n      counters.secondTenths = startValues[SECOND_TENTHS_POSITION];\n      counters.seconds = startValues[SECONDS_POSITION];\n      counters.minutes = startValues[MINUTES_POSITION];\n      counters.hours = startValues[HOURS_POSITION];\n      counters.days = startValues[DAYS_POSITION];\n      totalCounters = calculateTotalCounterFromValues(startValues, totalCounters);\n    }\n    function calculateTotalCounterFromValues(values, outputCounter) {\n      var total = outputCounter || {};\n      total.days = values[DAYS_POSITION];\n      total.hours = total.days * HOURS_PER_DAY + values[HOURS_POSITION];\n      total.minutes = total.hours * MINUTES_PER_HOUR + values[MINUTES_POSITION];\n      total.seconds = total.minutes * SECONDS_PER_MINUTE + values[SECONDS_POSITION];\n      total.secondTenths = total.seconds * SECOND_TENTHS_PER_SECOND + values[[SECOND_TENTHS_POSITION]];\n      return total;\n    }\n\n    /*\n     * PUBLIC functions\n     */\n\n    /**\n     * [stop stops the timer and resets the counters. Dispatch stopped event]\n     */\n    function stop() {\n      stopTimerAndResetCounters();\n      dispatchEvent('stopped', eventData);\n    }\n\n    /**\n     * [stop stops and starts the timer. Dispatch stopped event]\n     */\n    function reset() {\n      stopTimerAndResetCounters();\n      setParamsAndStartTimer(currentParams);\n      dispatchEvent('reset', eventData);\n    }\n\n    /**\n     * [start starts the timer configured by the params object. Dispatch started event]\n     * @param  {object} params [Configuration parameters]\n     */\n    function start() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      params = _objectSpread2(_objectSpread2({}, defaultParams), params);\n      if (isRunning()) {\n        return;\n      }\n      setParamsAndStartTimer(params);\n      dispatchEvent('started', eventData);\n    }\n\n    /**\n     * [pause stops the timer without resetting the counters. The timer it can be restarted with start function.\n     * Dispatch paused event]\n     * @return {type} [description]\n     */\n    function pause() {\n      stopTimer();\n      paused = true;\n      dispatchEvent('paused', eventData);\n    }\n\n    /**\n     * [addEventListener Adds event listener to the timer]\n     * @param {string} eventType      [event to listen]\n     * @param {function} listener   [the event listener function]\n     */\n    function addEventListener(eventType, listener) {\n      eventEmitter.on(eventType, listener);\n    }\n\n    /**\n     * [removeEventListener Removes event listener to the timer]\n     * @param  {string} eventType    [event to remove listener]\n     * @param  {function} listener [listener to remove]\n     */\n    function removeEventListener(eventType, listener) {\n      eventEmitter.removeListener(eventType, listener);\n    }\n\n    /**\n     * [removeAllEventListeners Removes all events listeners for the given type, no type to remove all types]\n     * @param  {string} [eventType]  [event to remove listener]\n     */\n    function removeAllEventListeners(eventType) {\n      eventEmitter.removeAllListeners(eventType);\n    }\n\n    /**\n     * [dispatchEvent dispatches an event]\n     * @param  {string} eventType [event to dispatch]\n     * @param data\n     */\n    function dispatchEvent(eventType, data) {\n      eventEmitter.emit(eventType, data);\n    }\n\n    /**\n     * [isRunning return true if the timer is running]\n     * @return {Boolean}\n     */\n    function isRunning() {\n      return running;\n    }\n\n    /**\n     * [isPaused returns true if the timer is paused]\n     * @return {Boolean}\n     */\n    function isPaused() {\n      return paused;\n    }\n\n    /**\n     * [getTimeValues returns the counter with the current timer values]\n     * @return {TimeCounter}\n     */\n    function getTimeValues() {\n      return counters;\n    }\n\n    /**\n     * [getTotalTimeValues returns the counter with the current timer total values]\n     * @return {TimeCounter}\n     */\n    function getTotalTimeValues() {\n      return totalCounters;\n    }\n\n    /**\n     * [getConfig returns the configuration parameters]\n     * @return {type}\n     */\n    function getConfig() {\n      return timerConfig;\n    }\n\n    /**\n     * Public API\n     * Definition of Timer instance public functions\n     */\n    if (typeof this !== 'undefined') {\n      this.start = start;\n      this.pause = pause;\n      this.stop = stop;\n      this.reset = reset;\n      this.isRunning = isRunning;\n      this.isPaused = isPaused;\n      this.getTimeValues = getTimeValues;\n      this.getTotalTimeValues = getTotalTimeValues;\n      this.getConfig = getConfig;\n      this.addEventListener = addEventListener;\n      this.on = addEventListener;\n      this.removeEventListener = removeEventListener;\n      this.removeAllEventListeners = removeAllEventListeners;\n      this.off = removeEventListener;\n    }\n  }\n\n  exports.Timer = Timer;\n  exports.default = Timer;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n","// Timer Module - Practice Test Countdown Timer\n// Uses EasyTimer.js for reliable countdown functionality\n\nimport Timer from 'easytimer.js';\n\nexport interface TimerWarning {\n  timeLeft: number;\n  message: string;\n}\n\nexport interface TimerCallbacks {\n  onUpdate?: (timeValues: any) => void;\n  onWarning?: (warning: TimerWarning) => void;\n  onComplete?: () => void;\n}\n\nexport class PracticeTestTimer {\n  private timer: Timer;\n  private totalSeconds: number;\n  private callbacks: TimerCallbacks;\n  private warningsShown: Set<number> = new Set();\n\n  constructor(numQuestions: number, callbacks: TimerCallbacks = {}) {\n    this.timer = new Timer();\n    this.totalSeconds = Math.max(60, numQuestions * 3 * 60); // Minimum 1 minute, 3 minutes per question\n    this.callbacks = callbacks;\n    this.setupEventListeners();\n    \n    // Failsafe: Set up interval to check timer health\n    this.setupTimerHealthCheck();\n  }\n\n  private healthCheckInterval: number | null = null;\n\n  private setupEventListeners(): void {\n    // Update event - fires every second\n    this.timer.addEventListener('secondsUpdated', () => {\n      const timeValues = this.timer.getTimeValues();\n      const totalTimeValues = this.timer.getTotalTimeValues();\n      const remainingSeconds = totalTimeValues.seconds;\n\n      // Call update callback if provided\n      if (this.callbacks.onUpdate) {\n        this.callbacks.onUpdate(timeValues);\n      }\n\n      // Check for warnings (5 minutes = 300 seconds, 1 minute = 60 seconds)\n      this.checkWarnings(remainingSeconds);\n    });\n\n    // Timer completion event\n    this.timer.addEventListener('targetAchieved', () => {\n      if (this.callbacks.onComplete) {\n        this.callbacks.onComplete();\n      }\n    });\n  }\n\n  private checkWarnings(remainingSeconds: number): void {\n    const fiveMinutes = 300;\n    const oneMinute = 60;\n\n    // 5-minute warning\n    if (remainingSeconds === fiveMinutes && !this.warningsShown.has(fiveMinutes)) {\n      this.warningsShown.add(fiveMinutes);\n      if (this.callbacks.onWarning) {\n        this.callbacks.onWarning({\n          timeLeft: fiveMinutes,\n          message: '⚠️ 5 minutes remaining'\n        });\n      }\n    }\n\n    // 1-minute warning\n    if (remainingSeconds === oneMinute && !this.warningsShown.has(oneMinute)) {\n      this.warningsShown.add(oneMinute);\n      if (this.callbacks.onWarning) {\n        this.callbacks.onWarning({\n          timeLeft: oneMinute,\n          message: '⚠️ 1 minute remaining'\n        });\n      }\n    }\n  }\n\n  public start(): void {\n    this.startWithTime(this.totalSeconds);\n  }\n\n  public startWithTime(remainingSeconds: number): void {\n    try {\n      this.timer.start({\n        countdown: true,\n        startValues: { seconds: remainingSeconds }\n      });\n    } catch (error) {\n      console.error('Failed to start timer:', error);\n      // Failsafe: Try to restart after a brief delay\n      setTimeout(() => {\n        try {\n          this.timer.start({\n            countdown: true,\n            startValues: { seconds: remainingSeconds }\n          });\n        } catch (retryError) {\n          console.error('Timer restart failed:', retryError);\n        }\n      }, 100);\n    }\n  }\n\n  private setupTimerHealthCheck(): void {\n    // Check timer health every 30 seconds\n    this.healthCheckInterval = window.setInterval(() => {\n      if (this.timer.isRunning()) {\n        const remainingSeconds = this.getTotalRemainingSeconds();\n        \n        // Failsafe: If timer shows negative or invalid time, trigger completion\n        if (remainingSeconds <= 0) {\n          console.warn('Timer health check: Timer expired, triggering completion');\n          this.clearHealthCheck();\n          if (this.callbacks.onComplete) {\n            this.callbacks.onComplete();\n          }\n        }\n        \n        // Failsafe: If timer appears stuck (same value for too long), restart it\n        this.checkTimerStall(remainingSeconds);\n      }\n    }, 30000);\n  }\n\n  private lastHealthCheckTime: number = 0;\n  private healthCheckStallCount: number = 0;\n\n  private checkTimerStall(currentTime: number): void {\n    if (this.lastHealthCheckTime === currentTime) {\n      this.healthCheckStallCount++;\n      \n      // If timer hasn't changed for 3 consecutive checks (90 seconds), restart it\n      if (this.healthCheckStallCount >= 3) {\n        console.warn('Timer appears stalled, attempting restart');\n        this.healthCheckStallCount = 0;\n        \n        const wasRunning = this.timer.isRunning();\n        if (wasRunning) {\n          this.timer.stop();\n          this.timer.start({\n            countdown: true,\n            startValues: { seconds: currentTime }\n          });\n        }\n      }\n    } else {\n      this.healthCheckStallCount = 0;\n    }\n    \n    this.lastHealthCheckTime = currentTime;\n  }\n\n  private clearHealthCheck(): void {\n    if (this.healthCheckInterval) {\n      clearInterval(this.healthCheckInterval);\n      this.healthCheckInterval = null;\n    }\n  }\n\n  public pause(): void {\n    this.timer.pause();\n  }\n\n  public resume(): void {\n    if (this.timer.isPaused()) {\n      this.timer.start();\n    }\n  }\n\n  public stop(): void {\n    this.timer.stop();\n  }\n\n  public reset(): void {\n    this.timer.reset();\n    this.warningsShown.clear();\n  }\n\n  public getRemainingTime(): any {\n    return this.timer.getTimeValues();\n  }\n\n  public getTotalRemainingSeconds(): number {\n    return this.timer.getTotalTimeValues().seconds;\n  }\n\n  public getFormattedTime(): string {\n    const timeValues = this.timer.getTimeValues();\n    const hours = timeValues.hours.toString().padStart(2, '0');\n    const minutes = timeValues.minutes.toString().padStart(2, '0');\n    const seconds = timeValues.seconds.toString().padStart(2, '0');\n    \n    if (timeValues.hours > 0) {\n      return `${hours}:${minutes}:${seconds}`;\n    } else {\n      return `${minutes}:${seconds}`;\n    }\n  }\n\n  public isRunning(): boolean {\n    return this.timer.isRunning();\n  }\n\n  public isPaused(): boolean {\n    return this.timer.isPaused();\n  }\n\n  public destroy(): void {\n    this.clearHealthCheck();\n    this.timer.removeAllEventListeners();\n    this.timer.stop();\n  }\n\n  // Static utility method to format seconds into human-readable time\n  public static formatSeconds(seconds: number): string {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const remainingSeconds = seconds % 60;\n\n    if (hours > 0) {\n      return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\n    } else {\n      return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\n    }\n  }\n\n  // Static utility method to calculate total test time\n  public static calculateTestDuration(numQuestions: number): number {\n    return numQuestions * 3 * 60; // 3 minutes per question in seconds\n  }\n}\n\n// Utility functions for showing warnings\nexport function showTimerWarning(warning: TimerWarning): void {\n  // Create a non-intrusive warning notification\n  const warningEl = document.createElement('div');\n  warningEl.className = 'timer-warning';\n  warningEl.textContent = warning.message;\n  warningEl.style.cssText = `\n    position: fixed;\n    top: 20px;\n    right: 20px;\n    background: #ff9800;\n    color: white;\n    padding: 12px 20px;\n    border-radius: 6px;\n    font-weight: 600;\n    box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n    z-index: 1000;\n    animation: slideInRight 0.3s ease-out;\n  `;\n\n  // Add animation styles\n  const style = document.createElement('style');\n  style.textContent = `\n    @keyframes slideInRight {\n      from {\n        transform: translateX(100%);\n        opacity: 0;\n      }\n      to {\n        transform: translateX(0);\n        opacity: 1;\n      }\n    }\n    @keyframes fadeOut {\n      from {\n        opacity: 1;\n      }\n      to {\n        opacity: 0;\n      }\n    }\n  `;\n  document.head.appendChild(style);\n\n  document.body.appendChild(warningEl);\n\n  // Auto-remove after 5 seconds\n  setTimeout(() => {\n    warningEl.style.animation = 'fadeOut 0.3s ease-out';\n    setTimeout(() => {\n      if (warningEl.parentNode) {\n        warningEl.parentNode.removeChild(warningEl);\n      }\n    }, 300);\n  }, 5000);\n}\n\nexport default PracticeTestTimer;\n","// Practice Mode Logic - Full Implementation\n\nimport type {\n  Question,\n  PracticeState,\n  PracticeResult,\n} from '@/types/question';\nimport { formatBankName } from '@/utils/bankNames';\nimport { EMPTY_HISTORY } from '@/utils/history';\nimport { evaluateAnswer, getCorrectAnswerText, formatExplanation } from '@/utils/answers';\nimport { PracticeTestTimer, showTimerWarning, type TimerWarning } from '@/utils/timer';\nimport { banks } from './banks';\nimport { questionRenderer } from './question_renderer';\n\n// Make utility functions globally available for questionRenderer\n(window as any).evaluateAnswer = evaluateAnswer;\n(window as any).getCorrectAnswerText = getCorrectAnswerText;\n(window as any).formatExplanation = formatExplanation;\n\n// Practice test with timer functionality - countdown based on question count\n\nexport class PracticeManager {\n  private state: PracticeState | null = null;\n  private isFinished: boolean = false;\n  private sessionKey: string = '';\n  private timer: PracticeTestTimer | null = null;\n  private timerDisplayElement: HTMLElement | null = null;\n  private timeUpTriggered: boolean = false;\n\n  constructor() {\n    this.timerDisplayElement = document.getElementById('timerValue');\n  }\n\n  init(): void {\n    const params = new URLSearchParams(window.location.search);\n    const bank = params.get('bank');\n    const numQuestions = parseInt(params.get('num') || '10');\n    const resume = params.get('resume') === 'true';\n\n    if (!bank || !banks || !banks[bank]) {\n      alert('No valid question bank selected');\n      window.location.href = 'index.html';\n    return;\n  }\n  \n    this.sessionKey = `practice_session_${bank}_${numQuestions}`;\n    \n    // Try to resume existing session\n    if (resume || this.loadExistingSession()) {\n      console.log('Resuming existing practice session');\n    } else {\n      this.setupPracticeSession(bank, numQuestions);\n    }\n    \n    this.setupEventListeners();\n    this.renderCurrentQuestion();\n    \n    // Add auto-save and cleanup on page unload\n    window.addEventListener('beforeunload', () => {\n      this.saveSession();\n      if (this.timer) {\n        this.timer.destroy();\n      }\n    });\n  }\n\n  private setupPracticeSession(bank: string, numQuestions: number): void {\n    const bankData = banks[bank];\n    if (!bankData || !bankData.length) {\n      alert('Question bank is empty');\n    return;\n  }\n  \n    // Validate numQuestions\n    if (numQuestions <= 0 || numQuestions > 100) {\n      alert('Invalid number of questions. Using default of 10.');\n      numQuestions = 10;\n    }\n\n    // Flatten all questions from all files in the bank\n    const allQuestions: Question[] = [];\n    bankData.forEach((questionArray: Question[]) => {\n      allQuestions.push(...questionArray);\n    });\n\n    // Shuffle and select questions\n    const shuffled = allQuestions.sort(() => Math.random() - 0.5);\n    const selectedQuestions = shuffled.slice(0, Math.min(numQuestions, shuffled.length));\n\n    this.state = {\n      currentQuestion: 0,\n      questions: selectedQuestions,\n      answers: {},\n      flagged: new Set(),\n      startTime: Date.now(),\n      bank,\n      totalQuestions: selectedQuestions.length\n    };\n  \n  // Update UI\n    const titleEl = document.querySelector('.test-title');\n    if (titleEl) {\n      titleEl.textContent = `${formatBankName(bank)} - ${selectedQuestions.length} Questions`;\n    }\n\n    this.setupNavigation();\n    this.updateProgress();\n    this.initializeTimer();\n  }\n\n  private setupNavigation(): void {\n    if (!this.state) {return;}\n\n    const nav = document.querySelector('.sidebar .nav');\n    if (!nav) {return;}\n\n    nav.innerHTML = '';\n    for (let i = 0; i < this.state.totalQuestions; i++) {\n      const li = document.createElement('li');\n      li.dataset.question = i.toString();\n      li.textContent = (i + 1).toString();\n      nav.appendChild(li);\n    }\n\n    // Add click handlers\n    nav.addEventListener('click', (e) => {\n      const li = (e.target as HTMLElement).closest('li') as HTMLLIElement;\n      if (li && li.dataset.question) {\n        const questionNum = parseInt(li.dataset.question);\n        this.goToQuestion(questionNum);\n      }\n    });\n  }\n\n  private setupEventListeners(): void {\n    // Navigation buttons\n    const backBtn = document.querySelector('.back-btn') as HTMLButtonElement;\n    const nextBtn = document.querySelector('.next-btn') as HTMLButtonElement;\n    const flagBtn = document.querySelector('.flag-current-btn') as HTMLButtonElement;\n    const finishBtn = document.querySelector('.finish-btn') as HTMLButtonElement;\n    const checkBtn = document.getElementById('checkBtn') as HTMLButtonElement;\n    if (backBtn) {\n      backBtn.addEventListener('click', () => this.previousQuestion());\n    }\n    if (nextBtn) {\n      nextBtn.addEventListener('click', () => this.nextQuestion());\n    }\n    if (flagBtn) {\n      flagBtn.addEventListener('click', () => this.toggleFlag());\n    }\n    if (finishBtn) {\n      finishBtn.addEventListener('click', () => this.finishTest());\n    }\n    if (checkBtn) {\n      checkBtn.addEventListener('click', () => this.toggleCheck());\n    }\n\n    // Answer selection handling\n    document.addEventListener('change', (e) => {\n      const target = e.target as HTMLInputElement;\n      if (target.name === 'answer' || target.id === 'calcInput') {\n        this.saveAnswer();\n      }\n    });\n\n    // Review status modal\n    const reviewBtn = document.querySelector('.review-status-btn') as HTMLButtonElement;\n    if (reviewBtn) {\n      reviewBtn.addEventListener('click', () => this.showReviewModal());\n    }\n\n    const modalClose = document.querySelector('.modal-close') as HTMLButtonElement;\n    if (modalClose) {\n      modalClose.addEventListener('click', () => this.hideReviewModal());\n    }\n  }\n\n  private renderCurrentQuestion(): void {\n    if (!this.state || this.state.currentQuestion >= this.state.questions.length) {return;}\n\n    const question = this.state.questions[this.state.currentQuestion];\n    \n    // Update question number\n    const qNumEl = document.querySelector('.q-number');\n    if (qNumEl) {\n      qNumEl.textContent = `Question ${this.state.currentQuestion + 1}`;\n    }\n\n    // Render question using global renderer\n    if (questionRenderer) {\n      questionRenderer.renderQuestion(question, {\n        text: '#qText',\n        title: '#qTitle',\n        img: '#qImg',\n        options: '#answerOptions',\n        input: '.calculator',\n        unit: '#answerUnit',\n        feedback: '#feedback',\n        answer: '#answer',\n        explanation: '#explanation'\n      });\n    }\n\n    // Restore saved answer\n    const savedAnswer = this.state.answers[this.state.currentQuestion];\n    if (savedAnswer) {\n      if (question.is_calculation) {\n        const input = document.getElementById('calcInput') as HTMLInputElement;\n        if (input) {input.value = savedAnswer;}\n      } else {\n        const radio = document.querySelector(`input[name=\"answer\"][value=\"${savedAnswer}\"]`) as HTMLInputElement;\n        if (radio) {\n          radio.checked = true;\n          // Also update the visual selected state\n          const label = radio.closest('label');\n          if (label) {\n            label.classList.add('selected');\n          }\n        }\n      }\n    }\n\n    // Update flag icon visibility\n    const questionFlag = document.getElementById('questionFlag');\n    if (questionFlag) {\n      if (this.state.flagged.has(this.state.currentQuestion)) {\n        questionFlag.style.display = 'inline';\n      } else {\n        questionFlag.style.display = 'none';\n      }\n    }\n\n    // Reset feedback elements and button states when moving to a new question\n    this.resetFeedbackAndButtons();\n\n    this.updateNavigation();\n    this.updateProgress();\n    this.saveSession(); // Auto-save on question change\n  }\n\n  private saveAnswer(): void {\n    if (!this.state) {return;}\n\n    const question = this.state.questions[this.state.currentQuestion];\n    let answer = '';\n\n    if (question.is_calculation) {\n      const input = document.getElementById('calcInput') as HTMLInputElement;\n      answer = input?.value || '';\n    } else {\n      const selected = document.querySelector('input[name=\"answer\"]:checked') as HTMLInputElement;\n      answer = selected?.value || '';\n    }\n\n    if (answer) {\n      this.state.answers[this.state.currentQuestion] = answer;\n      this.updateNavigation();\n      this.updateProgress();\n      this.saveSession(); // Auto-save when answer changes\n    } else {\n      // If answer is empty, remove it from answers\n      delete this.state.answers[this.state.currentQuestion];\n      this.updateNavigation();\n      this.updateProgress();\n      this.saveSession(); // Auto-save when answer changes\n    }\n    \n    // Reset feedback and buttons when answer changes (only if currently showing feedback)\n    if (questionRenderer) {\n      const currentState = questionRenderer.getCurrentDisplayState();\n      if (currentState !== 'hidden') {\n        const question = this.state.questions[this.state.currentQuestion];\n        questionRenderer.displayAnswer(question, 'hide');\n      }\n    }\n  }\n\n  private updateProgress(): void {\n    if (!this.state) {return;}\n\n    const progressBar = document.querySelector('.progress .bar') as HTMLElement;\n    const answeredCount = Object.keys(this.state.answers).length;\n    const progress = (answeredCount / this.state.totalQuestions) * 100;\n\n    if (progressBar) {\n      progressBar.style.width = `${progress}%`;\n    }\n  }\n\n  private updateNavigation(): void {\n    if (!this.state) {return;}\n\n    // Update navigation buttons\n    const backBtn = document.querySelector('.back-btn') as HTMLButtonElement;\n    const nextBtn = document.querySelector('.next-btn') as HTMLButtonElement;\n    const flagBtn = document.querySelector('.flag-current-btn') as HTMLButtonElement;\n\n    if (backBtn) {\n      backBtn.disabled = this.state.currentQuestion === 0;\n    }\n    if (nextBtn) {\n      nextBtn.disabled = this.state.currentQuestion === this.state.totalQuestions - 1;\n    }\n    if (flagBtn) {\n      flagBtn.classList.toggle('active', this.state.flagged.has(this.state.currentQuestion));\n    }\n\n    // Update sidebar navigation\n    const navItems = document.querySelectorAll('.sidebar .nav li');\n    navItems.forEach((item, index) => {\n      const li = item as HTMLLIElement;\n      li.classList.remove('active', 'answered', 'flagged');\n      \n      // Set base content with flag icon if flagged\n      const questionNumber = index + 1;\n      if (this.state!.flagged.has(index)) {\n        li.innerHTML = `${questionNumber} <span class=\"flag-btn\">⚑</span>`;\n        li.classList.add('flagged');\n      } else {\n        li.textContent = questionNumber.toString();\n      }\n      \n      if (index === this.state!.currentQuestion) {\n        li.classList.add('active');\n      }\n      if (this.state!.answers[index]) {\n        li.classList.add('answered');\n      }\n    });\n  }\n\n  private goToQuestion(questionNum: number): void {\n    if (!this.state || questionNum < 0 || questionNum >= this.state.totalQuestions) {return;}\n\n    this.state.currentQuestion = questionNum;\n    this.renderCurrentQuestion();\n  }\n\n  private previousQuestion(): void {\n    if (!this.state || this.state.currentQuestion <= 0) {return;}\n    this.goToQuestion(this.state.currentQuestion - 1);\n  }\n\n  private nextQuestion(): void {\n    if (!this.state || this.state.currentQuestion >= this.state.totalQuestions - 1) {return;}\n    this.goToQuestion(this.state.currentQuestion + 1);\n  }\n\n  private toggleFlag(): void {\n    if (!this.state) {return;}\n\n    const questionNum = this.state.currentQuestion;\n    const questionFlag = document.getElementById('questionFlag');\n    \n    if (this.state.flagged.has(questionNum)) {\n      this.state.flagged.delete(questionNum);\n      if (questionFlag) {\n        questionFlag.style.display = 'none';\n      }\n    } else {\n      this.state.flagged.add(questionNum);\n      if (questionFlag) {\n        questionFlag.style.display = 'inline';\n      }\n    }\n\n    this.updateNavigation();\n    this.saveSession(); // Auto-save when flag changes\n  }\n\n  private toggleCheck(): void {\n    if (!this.state || !questionRenderer) {\n      return;\n    }\n    \n    const question = this.state.questions[this.state.currentQuestion];\n    const userAnswer = this.state.answers[this.state.currentQuestion];\n    const currentState = questionRenderer.getCurrentDisplayState();\n    \n    if (currentState === 'checked') {\n      questionRenderer.displayAnswer(question, 'hide');\n    } else {\n      questionRenderer.displayAnswer(question, 'check', userAnswer);\n    }\n  }\n\n\n\n  private resetFeedbackAndButtons(): void {\n    if (!questionRenderer) {\n      return;\n    }\n    \n    // The questionRenderer will handle all the cleanup and button state management\n    const dummyQuestion = { id: 0 } as Question; // Just for the interface, not actually used\n    questionRenderer.displayAnswer(dummyQuestion, 'hide');\n  }\n\n  private finishTest(): void {\n    if (!this.state) {return;}\n\n    const answeredCount = Object.keys(this.state.answers).length;\n    const unanswered = this.state.totalQuestions - answeredCount;\n\n    if (unanswered > 0) {\n      const confirm = window.confirm(\n        `You have ${unanswered} unanswered questions. Are you sure you want to finish the test?`\n      );\n      if (!confirm) {return;}\n    }\n\n    this.calculateResults();\n    this.clearSession(); // Clear session when test is completed\n    this.showSummary();\n  }\n\n  private initializeTimer(remainingSeconds?: number): void {\n    if (!this.state) {\n      return;\n    }\n\n    // Clean up existing timer if any\n    if (this.timer) {\n      this.timer.destroy();\n      this.timer = null;\n    }\n\n    // Create timer with callbacks\n    this.timer = new PracticeTestTimer(this.state.totalQuestions, {\n      onUpdate: () => this.updateTimerDisplay(),\n      onWarning: (warning) => this.handleTimerWarning(warning),\n      onComplete: () => this.handleTimeUp()\n    });\n\n    // Start timer with remaining time if provided (for session restoration)\n    if (remainingSeconds !== undefined && remainingSeconds > 0) {\n      // Calculate elapsed time and adjust start time\n      const totalSeconds = this.state.totalQuestions * 3 * 60;\n      const elapsedSeconds = totalSeconds - remainingSeconds;\n      this.state.startTime = Date.now() - (elapsedSeconds * 1000);\n      \n      // Start timer with exact remaining time\n      this.timer.startWithTime(remainingSeconds);\n    } else {\n      // Start fresh timer\n      this.timer.start();\n    }\n\n    // Failsafe: Check if timer should have already expired\n    this.checkTimerExpiry();\n  }\n\n  private checkTimerExpiry(): void {\n    if (!this.state || !this.timer) {\n      return;\n    }\n\n    // Failsafe: Check if test should have already ended based on elapsed time\n    const elapsedMs = Date.now() - this.state.startTime;\n    const totalTimeMs = this.state.totalQuestions * 3 * 60 * 1000;\n    \n    if (elapsedMs >= totalTimeMs) {\n      console.warn('Timer failsafe triggered - test time has expired');\n      this.handleTimeUp();\n    }\n  }\n\n  private updateTimerDisplay(): void {\n    if (!this.timerDisplayElement || !this.timer) {\n      return;\n    }\n\n    try {\n      const formattedTime = this.timer.getFormattedTime();\n      this.timerDisplayElement.textContent = formattedTime;\n\n      // Update timer display styling based on remaining time\n      const remainingSeconds = this.timer.getTotalRemainingSeconds();\n      const timerDisplay = document.getElementById('timerDisplay');\n      \n      // Failsafe: Check for negative time (shouldn't happen but just in case)\n      if (remainingSeconds < 0) {\n        console.warn('Timer display failsafe: Negative time detected, triggering completion');\n        this.handleTimeUp();\n        return;\n      }\n      \n      if (timerDisplay) {\n        // Remove existing warning classes\n        timerDisplay.classList.remove('warning', 'critical');\n        \n        // Add appropriate warning class\n        if (remainingSeconds <= 60) { // Last minute\n          timerDisplay.classList.add('critical');\n        } else if (remainingSeconds <= 300) { // Last 5 minutes\n          timerDisplay.classList.add('warning');\n        }\n      }\n    } catch (error) {\n      console.error('Error updating timer display:', error);\n      // Failsafe: Show a generic timer display if specific formatting fails\n      if (this.timerDisplayElement) {\n        this.timerDisplayElement.textContent = '00:00';\n      }\n    }\n  }\n\n  private handleTimerWarning(warning: TimerWarning): void {\n    // Show unintrusive warning notification\n    showTimerWarning(warning);\n  }\n\n  private handleTimeUp(): void {\n    if (!this.state || this.timeUpTriggered) {\n      return; // Prevent multiple time-up events\n    }\n\n    // Mark time up as triggered to prevent duplicates\n    this.timeUpTriggered = true;\n\n    // Stop any ongoing actions\n    this.isFinished = true;\n\n    // Clean up timer\n    if (this.timer) {\n      this.timer.destroy();\n      this.timer = null;\n    }\n\n    // Show time up notification\n    const timeUpModal = this.createTimeUpModal();\n    document.body.appendChild(timeUpModal);\n  }\n\n  private createTimeUpModal(): HTMLElement {\n    const modal = document.createElement('div');\n    modal.className = 'time-up-modal';\n    modal.style.cssText = `\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background: rgba(0, 0, 0, 0.8);\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      z-index: 2000;\n      font-family: 'Nunito', sans-serif;\n    `;\n\n    const modalContent = document.createElement('div');\n    modalContent.style.cssText = `\n      background: white;\n      padding: 40px;\n      border-radius: 12px;\n      text-align: center;\n      max-width: 400px;\n      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);\n    `;\n\n    const title = document.createElement('h2');\n    title.textContent = '⏰ Time\\'s Up!';\n    title.style.cssText = `\n      color: #e74c3c;\n      margin: 0 0 20px 0;\n      font-size: 28px;\n    `;\n\n    const message = document.createElement('p');\n    message.textContent = 'Your practice test time has expired. You can still review your answers or finish the test now.';\n    message.style.cssText = `\n      color: #555;\n      margin: 0 0 30px 0;\n      line-height: 1.5;\n      font-size: 16px;\n    `;\n\n    const buttonContainer = document.createElement('div');\n    buttonContainer.style.cssText = `\n      display: flex;\n      gap: 15px;\n      justify-content: center;\n    `;\n\n    const finishButton = document.createElement('button');\n    finishButton.textContent = 'Finish Test';\n    finishButton.className = 'btn btn-danger';\n    finishButton.style.cssText = `\n      padding: 12px 24px;\n      font-weight: 600;\n      border: none;\n      border-radius: 6px;\n      cursor: pointer;\n      background: #e74c3c;\n      color: white;\n    `;\n    finishButton.addEventListener('click', () => {\n      document.body.removeChild(modal);\n      this.finishTest();\n    });\n\n    const continueButton = document.createElement('button');\n    continueButton.textContent = 'Continue Review';\n    continueButton.className = 'btn btn-secondary';\n    continueButton.style.cssText = `\n      padding: 12px 24px;\n      font-weight: 600;\n      border: 1px solid #ccc;\n      border-radius: 6px;\n      cursor: pointer;\n      background: white;\n      color: #555;\n    `;\n    continueButton.addEventListener('click', () => {\n      document.body.removeChild(modal);\n    });\n\n    buttonContainer.appendChild(finishButton);\n    buttonContainer.appendChild(continueButton);\n\n    modalContent.appendChild(title);\n    modalContent.appendChild(message);\n    modalContent.appendChild(buttonContainer);\n    modal.appendChild(modalContent);\n\n    return modal;\n  }\n\n  private calculateResults(): void {\n    if (!this.state) {return;}\n\n    let correctCount = 0;\n    const duration = Math.floor((Date.now() - this.state.startTime) / 60000); // Calculate elapsed minutes\n\n    // Check answers\n    for (let i = 0; i < this.state.questions.length; i++) {\n      const question = this.state.questions[i];\n      const userAnswer = this.state.answers[i];\n      \n      if (userAnswer && evaluateAnswer(question, userAnswer)) {\n        correctCount++;\n      }\n    }\n\n    const score = Math.round((correctCount / this.state.totalQuestions) * 100);\n    const resultId = Date.now().toString();\n\n    // Save complete test result to history\n    this.savePracticeResult({\n      id: resultId,\n      bank: this.state.bank,\n      totalQuestions: this.state.totalQuestions,\n      correctAnswers: correctCount,\n      score,\n      duration,\n      date: new Date().toISOString(),\n      flaggedQuestions: this.state.flagged.size,\n      questions: this.state.questions,\n      answers: this.state.answers,\n      flagged: Array.from(this.state.flagged)\n    } as PracticeResult);\n\n    this.isFinished = true;\n    \n    // Redirect to summary page\n    window.location.href = `summary.html?resultId=${resultId}`;\n  }\n\n  private showSummary(): void {\n    // This method is no longer needed as we redirect to a separate summary page\n    // The summary functionality is now handled by summary.ts\n  }\n\n\n  private showReviewModal(): void {\n    if (!this.state) {return;}\n\n    const modal = document.getElementById('reviewModal');\n    if (!modal) {return;}\n\n    // Setup filter functionality\n    this.setupFilterHandlers();\n\n    // Generate question grid\n    this.updateQuestionGrid();\n\n    modal.style.display = 'block';\n  }\n\n  private setupFilterHandlers(): void {\n    const filterUnattempted = document.getElementById('filterUnattempted') as HTMLInputElement;\n    const filterAttempted = document.getElementById('filterAttempted') as HTMLInputElement;\n    const filterFlagged = document.getElementById('filterFlagged') as HTMLInputElement;\n    const clearBtn = document.querySelector('.clear-filter-btn') as HTMLButtonElement;\n\n    if (filterUnattempted) {\n      filterUnattempted.addEventListener('change', () => this.updateQuestionGrid());\n    }\n    if (filterAttempted) {\n      filterAttempted.addEventListener('change', () => this.updateQuestionGrid());\n    }\n    if (filterFlagged) {\n      filterFlagged.addEventListener('change', () => this.updateQuestionGrid());\n    }\n    if (clearBtn) {\n      clearBtn.addEventListener('click', () => this.clearFilters());\n    }\n  }\n\n  private clearFilters(): void {\n    const filterUnattempted = document.getElementById('filterUnattempted') as HTMLInputElement;\n    const filterAttempted = document.getElementById('filterAttempted') as HTMLInputElement;\n    const filterFlagged = document.getElementById('filterFlagged') as HTMLInputElement;\n\n    if (filterUnattempted) {\n      filterUnattempted.checked = false;\n    }\n    if (filterAttempted) {\n      filterAttempted.checked = false;\n    }\n    if (filterFlagged) {\n      filterFlagged.checked = false;\n    }\n\n    this.updateQuestionGrid();\n  }\n\n  private updateQuestionGrid(): void {\n    if (!this.state) {return;}\n\n    const filterUnattempted = document.getElementById('filterUnattempted') as HTMLInputElement;\n    const filterAttempted = document.getElementById('filterAttempted') as HTMLInputElement;\n    const filterFlagged = document.getElementById('filterFlagged') as HTMLInputElement;\n\n    const gridEl = document.getElementById('questionGridReview');\n    if (!gridEl) {return;}\n\n    gridEl.innerHTML = '';\n\n    for (let i = 0; i < this.state.totalQuestions; i++) {\n      const isAttempted = !!this.state.answers[i];\n      const isFlagged = this.state.flagged.has(i);\n      const isCurrent = i === this.state.currentQuestion;\n\n      // Check if question should be shown based on filters\n      // If no filters are selected, show all questions\n      const hasActiveFilters = (filterUnattempted?.checked || filterAttempted?.checked || filterFlagged?.checked);\n      \n      let shouldShow = false;\n      \n      if (!hasActiveFilters) {\n        // If no filters are selected, show all questions\n        shouldShow = true;\n      } else {\n        // Apply selected filters\n        if (isAttempted && filterAttempted?.checked) {\n          shouldShow = true;\n        }\n        if (!isAttempted && filterUnattempted?.checked) {\n          shouldShow = true;\n        }\n        if (isFlagged && filterFlagged?.checked) {\n          shouldShow = true;\n        }\n      }\n\n      if (!shouldShow) {\n        continue;\n      }\n\n      const btn = document.createElement('button');\n      btn.className = 'grid-item';\n      btn.dataset.question = i.toString();\n\n      // Set base content with flag icon if flagged (consistent with sidebar navigation)\n      const questionNumber = i + 1;\n      if (isFlagged) {\n        btn.innerHTML = `${questionNumber} <span class=\"flag-btn\">⚑</span>`;\n        btn.classList.add('flagged');\n      } else {\n        btn.textContent = questionNumber.toString();\n      }\n\n      if (isAttempted) {\n        btn.classList.add('answered'); // Use 'answered' to match sidebar navigation\n      }\n      if (isCurrent) {\n        btn.classList.add('active'); // Use 'active' to match sidebar navigation\n      }\n\n      btn.addEventListener('click', () => {\n        this.goToQuestion(i);\n        this.hideReviewModal();\n      });\n\n      gridEl.appendChild(btn);\n    }\n  }\n\n  private hideReviewModal(): void {\n    const modal = document.getElementById('reviewModal');\n    if (modal) {\n      modal.style.display = 'none';\n    }\n  }\n\n  private savePracticeResult(result: PracticeResult): void {\n    try {\n      const existingHistory = localStorage.getItem('practice_history');\n      const history = existingHistory ? JSON.parse(existingHistory) : { ...EMPTY_HISTORY };\n      \n      history.results.unshift(result);\n      \n      // Keep only last 50 results\n      if (history.results.length > 50) {\n        history.results = history.results.slice(0, 50);\n      }\n      \n      localStorage.setItem('practice_history', JSON.stringify(history));\n    } catch (error) {\n      console.warn('Failed to save practice result:', error);\n    }\n  }\n\n  private saveSession(): void {\n    if (!this.state || this.isFinished) {\n      return;\n    }\n    \n    try {\n      // Calculate remaining time for timer persistence\n      let remainingSeconds = 0;\n      if (this.timer && this.timer.isRunning()) {\n        remainingSeconds = this.timer.getTotalRemainingSeconds();\n      } else {\n        // Fallback calculation if timer is not running\n        const elapsedMs = Date.now() - this.state.startTime;\n        const totalTimeMs = this.state.totalQuestions * 3 * 60 * 1000; // 3 minutes per question\n        remainingSeconds = Math.max(0, Math.floor((totalTimeMs - elapsedMs) / 1000));\n      }\n\n      const sessionData = {\n        currentQuestion: this.state.currentQuestion,\n        answers: this.state.answers,\n        flagged: Array.from(this.state.flagged),\n        startTime: this.state.startTime,\n        bank: this.state.bank,\n        totalQuestions: this.state.totalQuestions,\n        questions: this.state.questions.map((q: Question) => q.id), // Store only IDs to save space\n        timestamp: Date.now(),\n        remainingSeconds: remainingSeconds, // Save timer state\n        timerActive: this.timer ? this.timer.isRunning() : true\n      };\n      \n      sessionStorage.setItem(this.sessionKey, JSON.stringify(sessionData));\n      console.log('Session saved:', this.sessionKey);\n    } catch (error) {\n      console.warn('Failed to save session:', error);\n    }\n  }\n\n  private loadExistingSession(): boolean {\n    try {\n      const sessionData = sessionStorage.getItem(this.sessionKey);\n      if (!sessionData) {\n        return false;\n      }\n      \n      const data = JSON.parse(sessionData);\n      \n      // Check if session is too old (more than 24 hours)\n      if (Date.now() - data.timestamp > 24 * 60 * 60 * 1000) {\n        sessionStorage.removeItem(this.sessionKey);\n        return false;\n      }\n      \n      // Reconstruct questions from IDs\n    const bankData = banks[data.bank];\n      const allQuestions: Question[] = [];\n      bankData.forEach((questionArray: Question[]) => {\n        allQuestions.push(...questionArray);\n      });\n      \n        const questions = data.questions\n          .map((id: number) => allQuestions.find((q: Question) => q.id === id))\n          .filter((q: Question | undefined): q is Question => q !== undefined);\n      \n      if (questions.length !== data.totalQuestions) {\n        console.warn('Question mismatch, starting new session');\n        return false;\n      }\n      \n      this.state = {\n        currentQuestion: data.currentQuestion,\n        questions: questions,\n        answers: data.answers || {},\n        flagged: new Set(data.flagged || []),\n        startTime: data.startTime,\n        bank: data.bank,\n        totalQuestions: data.totalQuestions\n      };\n      \n      // Update UI\n      const titleEl = document.querySelector('.test-title');\n      if (titleEl) {\n        titleEl.textContent = `${formatBankName(data.bank)} - ${questions.length} Questions`;\n      }\n      \n      this.setupNavigation();\n      \n      // Restore timer with saved remaining time\n      const savedRemainingSeconds = data.remainingSeconds;\n      const timerWasActive = data.timerActive !== false; // Default to true if not saved\n      \n      if (timerWasActive && savedRemainingSeconds > 0) {\n        this.initializeTimer(savedRemainingSeconds);\n      } else if (savedRemainingSeconds <= 0) {\n        // Timer had expired, trigger time up immediately\n        this.handleTimeUp();\n      } else {\n        // Initialize fresh timer as fallback\n        this.initializeTimer();\n      }\n      \n      console.log('Session loaded successfully');\n      return true;\n    } catch (error) {\n      console.warn('Failed to load session:', error);\n      return false;\n    }\n  }\n\n  private clearSession(): void {\n    try {\n      sessionStorage.removeItem(this.sessionKey);\n      console.log('Session cleared:', this.sessionKey);\n    } catch (error) {\n      console.warn('Failed to clear session:', error);\n    }\n    \n    // Clean up timer\n    if (this.timer) {\n      this.timer.destroy();\n      this.timer = null;\n    }\n  }\n}\n\n","\n    import { PracticeManager } from '/static/practice.ts';\n    const practiceManager = new PracticeManager();\n    practiceManager.init();\n  "],"names":["exports","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread2","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_typeof","Symbol","iterator","constructor","prototype","obj","key","value","_toPropertyKey","configurable","writable","_toPrimitive","input","hint","prim","toPrimitive","undefined","res","call","TypeError","String","Number","arg","leftPadding","string","padLength","character","i","characters","slice","TimeCounter","this","reset","EventEmitter","events","toString","units","separator","leftZeroPadding","arrayTime","join","secondTenths","seconds","minutes","hours","days","on","event","listener","_this","Array","isArray","removeListener","eventIndex","indexOf","splice","removeAllListeners","emit","_this2","_len","args","_key","SECOND_TENTHS_PER_SECOND","SECONDS_PER_MINUTE","MINUTES_PER_HOUR","HOURS_PER_DAY","SECOND_TENTHS_POSITION","SECONDS_POSITION","MINUTES_POSITION","HOURS_POSITION","DAYS_POSITION","SECOND_TENTHS","SECONDS","MINUTES","HOURS","DAYS","VALID_INPUT_VALUES","unitsInMilliseconds","groupedUnits","mod","number","module","Timer","intervalId","precision","timerTypeFactor","customCallback","currentParams","targetValues","startValues","countdown","startingDate","targetDate","defaultParams","counters","totalCounters","eventEmitter","running","paused","timerConfig","eventData","detail","timer","updateCounters","roundedValue","unitsPerGroup","Math","abs","updateDays","updateUnitByPrecision","updateHours","updateMinutes","updateSeconds","updateSecondTenths","previousValue","calculateIntegerUnitQuotient","stopTimerAndResetCounters","stopTimer","resetCounters","clearInterval","setParamsAndStartTimer","params","isPaused","calculateStartingDate","setTarget","target","setParams","startTimer","interval","isTargetAchieved","roundTimestamp","Date","now","setInterval","updateTimerAndDispatchEvents","currentTime","dispatchEvents","updateTimer","stop","dispatchEvent","elapsedTime","valuesUpdated","timestamp","floor","currentDate","checkPrecision","callback","setStartValues","isValidInputValue","Error","concat","configInputValues","inputValues","values","map","parseInt","unit","divisor","quotient","ceil","inputTarget","targetCounter","calculateTotalCounterFromValues","inputStartValues","outputCounter","total","start","isRunning","pause","addEventListener","eventType","removeEventListener","removeAllEventListeners","data","getTimeValues","getTotalTimeValues","getConfig","off","default","factory","PracticeTestTimer","totalSeconds","callbacks","warningsShown","Set","numQuestions","max","setupEventListeners","setupTimerHealthCheck","healthCheckInterval","timeValues","remainingSeconds","onUpdate","checkWarnings","onComplete","fiveMinutes","has","add","onWarning","timeLeft","message","startWithTime","error","console","setTimeout","retryError","window","getTotalRemainingSeconds","warn","clearHealthCheck","checkTimerStall","lastHealthCheckTime","healthCheckStallCount","resume","clear","getRemainingTime","getFormattedTime","padStart","destroy","formatSeconds","calculateTestDuration","evaluateAnswer","getCorrectAnswerText","formatExplanation","state","isFinished","sessionKey","timerDisplayElement","timeUpTriggered","document","getElementById","init","URLSearchParams","location","search","bank","get","banks","alert","href","loadExistingSession","log","setupPracticeSession","renderCurrentQuestion","saveSession","bankData","allQuestions","questionArray","shuffled","sort","random","selectedQuestions","min","currentQuestion","questions","answers","flagged","startTime","totalQuestions","titleEl","querySelector","textContent","formatBankName","setupNavigation","updateProgress","initializeTimer","nav","innerHTML","li","createElement","dataset","question","appendChild","closest","questionNum","goToQuestion","backBtn","nextBtn","flagBtn","finishBtn","checkBtn","previousQuestion","nextQuestion","toggleFlag","finishTest","toggleCheck","name","id","saveAnswer","reviewBtn","showReviewModal","modalClose","hideReviewModal","qNumEl","questionRenderer","renderQuestion","text","title","img","options","feedback","answer","explanation","savedAnswer","is_calculation","radio","checked","label","classList","questionFlag","style","display","resetFeedbackAndButtons","updateNavigation","selected","getCurrentDisplayState","displayAnswer","progressBar","progress","width","disabled","toggle","querySelectorAll","item","index","remove","questionNumber","delete","userAnswer","answeredCount","unanswered","confirm","calculateResults","clearSession","showSummary","updateTimerDisplay","warning","handleTimerWarning","handleTimeUp","elapsedSeconds","checkTimerExpiry","formattedTime","timerDisplay","warningEl","className","cssText","head","body","animation","parentNode","removeChild","showTimerWarning","timeUpModal","createTimeUpModal","modal","modalContent","buttonContainer","finishButton","continueButton","correctCount","duration","score","round","resultId","savePracticeResult","correctAnswers","date","toISOString","flaggedQuestions","size","from","setupFilterHandlers","updateQuestionGrid","filterUnattempted","filterAttempted","filterFlagged","clearBtn","clearFilters","gridEl","isAttempted","isFlagged","isCurrent","shouldShow","btn","result","existingHistory","localStorage","getItem","history","JSON","parse","EMPTY_HISTORY","results","unshift","setItem","stringify","elapsedMs","totalTimeMs","sessionData","q","timerActive","sessionStorage","removeItem","find","savedRemainingSeconds"],"mappings":"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","x_google_ignoreList":[0]}