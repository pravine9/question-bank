{"version":3,"file":"summary-legacy-CMWy4BWc.js","sources":["../../static/summary.ts","../../templates/summary.html?html-proxy&index=0.js"],"sourcesContent":["// Summary Page Logic - Dedicated Implementation\n\nimport type { PracticeResult } from '@/types/question';\nimport { EMPTY_HISTORY } from '@/utils/history';\nimport { evaluateAnswer, getCorrectAnswerText, formatExplanation } from '@/utils/answers';\nimport { questionRenderer } from './question_renderer';\n\n// Make utility functions globally available for questionRenderer\n(window as any).evaluateAnswer = evaluateAnswer;\n(window as any).getCorrectAnswerText = getCorrectAnswerText;\n(window as any).formatExplanation = formatExplanation;\n\nexport class SummaryManager {\n  private testResult: PracticeResult | null = null;\n  private currentReviewQuestion: number = 0;\n  private reviewMode: 'all' | 'incorrect' | 'flagged' = 'all';\n  private filteredRows: HTMLTableRowElement[] = [];\n\n  constructor() {\n    this.init();\n    this.setupBackButtonHandling();\n  }\n\n  init(): void {\n    this.loadTestResult();\n    this.setupEventListeners();\n  }\n\n  private loadTestResult(): void {\n    const params = new URLSearchParams(window.location.search);\n    const resultId = params.get('resultId');\n    \n    if (!resultId) {\n      alert('No test result found');\n      window.location.href = 'index.html';\n      return;\n    }\n\n    try {\n      const existingHistory = localStorage.getItem('practice_history');\n      const history = existingHistory ? JSON.parse(existingHistory) : { ...EMPTY_HISTORY };\n      \n      const result = history.results.find((r: any) => r.id === resultId);\n      if (!result) {\n        alert('Test result not found');\n        window.location.href = 'index.html';\n        return;\n      }\n\n      this.testResult = result;\n      this.populateSummary();\n    } catch (error) {\n      console.error('Failed to load test result:', error);\n      alert('Failed to load test result');\n      window.location.href = 'index.html';\n    }\n  }\n\n  private populateSummary(): void {\n    if (!this.testResult) return;\n\n    const tbody = document.querySelector('.summary-table tbody') as HTMLTableSectionElement;\n    const scoreText = document.getElementById('scoreText') as HTMLElement;\n\n    if (!tbody) return;\n\n    let correctCount = 0;\n    tbody.innerHTML = '';\n    this.filteredRows = [];\n\n    for (let i = 0; i < this.testResult.questions.length; i++) {\n      const question = this.testResult.questions[i];\n      const userAnswer = this.testResult.answers[i] || 'No answer';\n      const isCorrect =\n        userAnswer !== 'No answer' && evaluateAnswer(question, userAnswer);\n      \n      if (isCorrect) {\n        correctCount++;\n      }\n\n      const row = tbody.insertRow();\n      this.filteredRows.push(row);\n      \n      const statusClass = isCorrect ? 'correct' : 'incorrect';\n      const statusText = isCorrect ? '✓ Correct' : '✗ Incorrect';\n      \n      // Get the actual answer text instead of just the number\n      let userAnswerText = userAnswer;\n      if (userAnswer !== 'No answer' && !question.is_calculation) {\n        const selectedAnswer = question.answers.find(a => a.answer_number.toString() === userAnswer);\n        userAnswerText = selectedAnswer ? selectedAnswer.text : userAnswer;\n      }\n      \n      row.innerHTML = `\n        <td>\n          <div class=\"question-number\">${i + 1}</div>\n        </td>\n        <td class=\"answer-cell\">${userAnswerText}</td>\n        <td class=\"correct-answer-cell\">${getCorrectAnswerText(question)}</td>\n        <td class=\"status-cell ${statusClass}\">${statusText}</td>\n        <td class=\"review-cell\">\n          <button class=\"review-question\" data-question=\"${i}\">Review</button>\n        </td>\n      `;\n    }\n\n    const score = Math.round((correctCount / this.testResult.totalQuestions) * 100);\n\n    // Update score display\n    if (scoreText) scoreText.textContent = `You scored ${correctCount}/${this.testResult.totalQuestions} (${score}%)`;\n\n    // Add review handlers\n    tbody.addEventListener('click', (e) => {\n      const btn = (e.target as HTMLElement).closest('.review-question') as HTMLButtonElement;\n      if (btn) {\n        const questionNum = parseInt(btn.dataset.question || '0');\n        this.openReviewModal(questionNum);\n      }\n    });\n\n    // Apply initial filter (show all questions by default)\n    this.applyFilters();\n  }\n\n  private setupEventListeners(): void {\n    const goHomeBtn = document.getElementById('goHomeBtn');\n    const modalClose = document.querySelector('.modal-close');\n    const closeReviewBtn = document.getElementById('closeReviewBtn');\n    const prevQuestionBtn = document.getElementById('prevQuestionBtn');\n    const nextQuestionBtn = document.getElementById('nextQuestionBtn');\n    const clearFilterBtn = document.querySelector('.clear-filter-btn');\n    if (goHomeBtn) {\n      goHomeBtn.addEventListener('click', () => {\n        window.location.href = 'index.html';\n      });\n    }\n    if (modalClose) {\n      modalClose.addEventListener('click', () => this.closeReviewModal());\n    }\n    if (closeReviewBtn) {\n      closeReviewBtn.addEventListener('click', () => this.closeReviewModal());\n    }\n    if (prevQuestionBtn) {\n      prevQuestionBtn.addEventListener('click', () => this.navigateReviewQuestion(-1));\n    }\n    if (nextQuestionBtn) {\n      nextQuestionBtn.addEventListener('click', () => this.navigateReviewQuestion(1));\n    }\n    if (clearFilterBtn) {\n      clearFilterBtn.addEventListener('click', () => this.clearFilters());\n    }\n\n    // Filter event listeners\n    const filterCorrect = document.getElementById('filterCorrect') as HTMLInputElement;\n    const filterIncorrect = document.getElementById('filterIncorrect') as HTMLInputElement;\n    const filterUnanswered = document.getElementById('filterUnanswered') as HTMLInputElement;\n\n    if (filterCorrect) {\n      filterCorrect.addEventListener('change', () => this.applyFilters());\n    }\n    if (filterIncorrect) {\n      filterIncorrect.addEventListener('change', () => this.applyFilters());\n    }\n    if (filterUnanswered) {\n      filterUnanswered.addEventListener('change', () => this.applyFilters());\n    }\n\n    // Close modal on outside click\n    const modal = document.getElementById('reviewModal');\n    if (modal) {\n      modal.addEventListener('click', (e) => {\n        if (e.target === modal) {\n          this.closeReviewModal();\n        }\n      });\n    }\n  }\n\n  private applyFilters(): void {\n    const filterCorrect = document.getElementById('filterCorrect') as HTMLInputElement;\n    const filterIncorrect = document.getElementById('filterIncorrect') as HTMLInputElement;\n    const filterUnanswered = document.getElementById('filterUnanswered') as HTMLInputElement;\n\n    if (!this.testResult) return;\n\n    // If no filters are selected, show all questions\n    const hasActiveFilters = (filterCorrect?.checked || filterIncorrect?.checked || filterUnanswered?.checked);\n\n    this.filteredRows.forEach((row, index) => {\n      const question = this.testResult!.questions[index];\n      const userAnswer = this.testResult!.answers[index] || 'No answer';\n      const isCorrect = userAnswer !== 'No answer' && evaluateAnswer(question, userAnswer);\n      \n      let shouldShow = false;\n      \n      if (!hasActiveFilters) {\n        // If no filters are selected, show all questions\n        shouldShow = true;\n      } else {\n        // Apply selected filters\n        if (isCorrect && filterCorrect?.checked) {\n          shouldShow = true;\n        } else if (!isCorrect && filterIncorrect?.checked) {\n          shouldShow = true;\n        } else if (userAnswer === 'No answer' && filterUnanswered?.checked) {\n          shouldShow = true;\n        }\n      }\n      \n      row.style.display = shouldShow ? '' : 'none';\n    });\n  }\n\n  private clearFilters(): void {\n    const filterCorrect = document.getElementById('filterCorrect') as HTMLInputElement;\n    const filterIncorrect = document.getElementById('filterIncorrect') as HTMLInputElement;\n    const filterUnanswered = document.getElementById('filterUnanswered') as HTMLInputElement;\n\n    if (filterCorrect) filterCorrect.checked = false;\n    if (filterIncorrect) filterIncorrect.checked = false;\n    if (filterUnanswered) filterUnanswered.checked = false;\n\n    this.applyFilters();\n  }\n\n  private startReviewMode(mode: 'all' | 'incorrect' | 'flagged'): void {\n    if (!this.testResult) return;\n\n    this.reviewMode = mode;\n    \n    // Find first question to review based on mode\n    let firstQuestion = 0;\n    \n    if (mode === 'incorrect') {\n      for (let i = 0; i < this.testResult.questions.length; i++) {\n        const userAnswer = this.testResult.answers[i];\n        if (userAnswer && !evaluateAnswer(this.testResult.questions[i], userAnswer)) {\n          firstQuestion = i;\n          break;\n        }\n      }\n    } else if (mode === 'flagged') {\n      for (let i = 0; i < this.testResult.questions.length; i++) {\n        if (this.testResult.flagged.includes(i)) {\n          firstQuestion = i;\n          break;\n        }\n      }\n    }\n\n    this.openReviewModal(firstQuestion);\n  }\n\n  private openReviewModal(questionNum: number): void {\n    if (!this.testResult || questionNum < 0 || questionNum >= this.testResult.questions.length) return;\n\n    this.currentReviewQuestion = questionNum;\n    const question = this.testResult.questions[questionNum];\n    const userAnswer = this.testResult.answers[questionNum] || 'No answer';\n\n    // Update modal title\n    const modalTitle = document.getElementById('reviewQuestionTitle');\n    if (modalTitle) {\n      modalTitle.textContent = `Question ${questionNum + 1} Review`;\n    }\n\n    // Render question using renderer\n    if (questionRenderer) {\n      questionRenderer.renderQuestion(question, {\n        text: '#reviewQuestionText',\n        title: '#reviewQuestionTitle',\n        img: '#reviewQuestionImage',\n        options: '#reviewAnswerOptions',\n        showInput: false, // Don't show input in review mode\n        reviewMode: true,\n        userAnswer: userAnswer\n      });\n    }\n\n\n\n    // Use the unified answer display system for consistent styling\n    if (questionRenderer) {\n      questionRenderer.displayAnswer(question, 'reveal');\n    }\n\n    // Update navigation buttons\n    this.updateReviewNavigation();\n\n    // Show modal\n    const modal = document.getElementById('reviewModal');\n    if (modal) {\n      modal.style.display = 'block';\n    }\n  }\n\n  private closeReviewModal(): void {\n    const modal = document.getElementById('reviewModal');\n    if (modal) {\n      modal.style.display = 'none';\n    }\n  }\n\n  private updateReviewNavigation(): void {\n    if (!this.testResult) return;\n\n    const prevQuestionBtn = document.getElementById('prevQuestionBtn') as HTMLButtonElement;\n    const nextQuestionBtn = document.getElementById('nextQuestionBtn') as HTMLButtonElement;\n\n    if (prevQuestionBtn) {\n      prevQuestionBtn.disabled = this.currentReviewQuestion === 0;\n    }\n    if (nextQuestionBtn) {\n      nextQuestionBtn.disabled = this.currentReviewQuestion === this.testResult.questions.length - 1;\n    }\n  }\n\n  private navigateReviewQuestion(direction: number): void {\n    if (!this.testResult) return;\n\n    let nextQuestion = this.currentReviewQuestion + direction;\n    \n    // Find next question based on mode\n    if (this.reviewMode === 'incorrect') {\n      while (nextQuestion >= 0 && nextQuestion < this.testResult.questions.length) {\n        const userAnswer = this.testResult.answers[nextQuestion];\n        if (userAnswer && !evaluateAnswer(this.testResult.questions[nextQuestion], userAnswer)) {\n          break;\n        }\n        nextQuestion += direction;\n      }\n    } else if (this.reviewMode === 'flagged') {\n      while (nextQuestion >= 0 && nextQuestion < this.testResult.questions.length) {\n        if (this.testResult.flagged.includes(nextQuestion)) {\n          break;\n        }\n        nextQuestion += direction;\n      }\n    }\n\n    // Ensure we stay within bounds\n    if (nextQuestion >= 0 && nextQuestion < this.testResult.questions.length) {\n      this.openReviewModal(nextQuestion);\n    }\n  }\n\n  private setupBackButtonHandling(): void {\n    // Prevent back button navigation\n    window.history.pushState(null, '', window.location.href);\n    \n    window.addEventListener('popstate', () => {\n      // Show confirmation dialog\n      const confirmNavigation = confirm(\n        'Are you sure you want to leave this page? Your test results will be lost.'\n      );\n      \n      if (confirmNavigation) {\n        // User confirmed, navigate to home\n        window.location.href = 'index.html';\n      } else {\n        // User cancelled, prevent navigation and restore state\n        window.history.pushState(null, '', window.location.href);\n      }\n    });\n\n    // Also handle beforeunload for page refresh/close\n    window.addEventListener('beforeunload', (event) => {\n      event.preventDefault();\n      event.returnValue = 'Are you sure you want to leave this page? Your test results will be lost.';\n      return event.returnValue;\n    });\n  }\n}\n\n// SummaryManager is exported and should be instantiated by the page script\n","\n    import { SummaryManager } from '/static/summary.ts';\n    new SummaryManager();\n  "],"names":["window","evaluateAnswer","getCorrectAnswerText","formatExplanation","testResult","currentReviewQuestion","reviewMode","filteredRows","constructor","this","init","setupBackButtonHandling","loadTestResult","setupEventListeners","resultId","URLSearchParams","location","search","get","alert","href","existingHistory","localStorage","getItem","result","JSON","parse","EMPTY_HISTORY","results","find","r","id","populateSummary","error","console","tbody","document","querySelector","scoreText","getElementById","correctCount","innerHTML","i","questions","length","question","userAnswer","answers","isCorrect","row","insertRow","push","statusClass","statusText","userAnswerText","is_calculation","selectedAnswer","a","answer_number","toString","text","score","Math","round","totalQuestions","textContent","addEventListener","e","btn","target","closest","questionNum","parseInt","dataset","openReviewModal","applyFilters","goHomeBtn","modalClose","closeReviewBtn","prevQuestionBtn","nextQuestionBtn","clearFilterBtn","closeReviewModal","navigateReviewQuestion","clearFilters","filterCorrect","filterIncorrect","filterUnanswered","modal","hasActiveFilters","checked","forEach","index","shouldShow","style","display","startReviewMode","mode","firstQuestion","flagged","includes","modalTitle","questionRenderer","renderQuestion","title","img","options","showInput","displayAnswer","updateReviewNavigation","disabled","direction","nextQuestion","history","pushState","confirm","event","preventDefault","returnValue"],"mappings":"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"}