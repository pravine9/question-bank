System.register(["./history-legacy-D--lc3Kv.js","./banks-legacy-BKIrSNgF.js"],function(t,e){"use strict";var n,s,a,r,o,i,c;return{setters:[t=>{n=t.e,s=t.g,a=t.f,r=t.q,o=t.E},t=>{i=t.b,c=t.f}],execute:function(){const t=i;let e=!1,l=null;function d(e){const n=document.getElementById(e);if(!n)return null;const s=n.value;if(!s)return null;const a=t[s];return Array.isArray(a)&&a.length?{bank:s,files:a}:null}function u(){const t=d("bankSelect");if(!t)return void alert("Please select a question bank");const e=t.files[Math.floor(Math.random()*t.files.length)];!function(t){l=t;try{const t=document.getElementById("bankSelect");t&&t.value&&localStorage.setItem("lastBank",t.value)}catch(o){console.warn("Failed to save lastBank",o)}r&&r.renderQuestion(t,{text:"#qText",title:"#qTitle",img:"#qImg",options:"#answerOptions",input:".calculator",unit:"#answerUnit",feedback:"#feedback",answer:"#answer",explanation:"#explanation"});const e=document.getElementById("questionArea");e&&(e.style.display="block");const n=document.getElementById("feedback");n&&(n.textContent="",n.classList.remove("correct","incorrect"));const s=document.getElementById("answer"),a=document.getElementById("explanation");s&&(s.style.display="none",s.innerHTML=""),a&&(a.style.display="none",a.innerHTML="")}(e[Math.floor(Math.random()*e.length)])}function h(){const t=d("bankSelect");if(!t)return void alert("Please select a question bank");const e=document.getElementById("numInput"),n=e&&parseInt(e.value)||10,s=`practice_session_${t.bank}_${n}`;if(sessionStorage.getItem(s)){if(confirm("You have an unfinished practice session for this bank. Would you like to resume where you left off?"))return void(window.location.href=`practice.html?bank=${encodeURIComponent(t.bank)}&num=${n}&resume=true`);sessionStorage.removeItem(s)}try{localStorage.setItem("lastBank",t.bank)}catch(a){console.warn("Failed to save lastBank",a)}window.location.href=`practice.html?bank=${encodeURIComponent(t.bank)}&num=${n}`}function y(){if(l&&r)if("checked"===r.getCurrentDisplayState())r.displayAnswer(l,"hide");else{const t=function(){if(!l)return"";if(l.is_calculation){const t=document.getElementById("calcInput");return t?.value||""}{const t=document.querySelector('input[name="answer"]:checked');return t?.value||""}}();r.displayAnswer(l,"check",t)}}function m(){l&&r&&("revealed"===r.getCurrentDisplayState()?r.displayAnswer(l,"hide"):r.displayAnswer(l,"reveal"))}window.evaluateAnswer=n,window.getCorrectAnswerText=s,window.formatExplanation=a,function(){const n=document.getElementById("loadBtn");n&&n.addEventListener("click",u);const s=document.getElementById("practiceBtn");s&&s.addEventListener("click",h);const a=document.getElementById("checkBtn");a&&a.addEventListener("click",y);const o=document.getElementById("revealBtn");o&&o.addEventListener("click",m);const i=document.getElementById("statsModal");if(i&&i.classList.remove("show"),"true"===new URLSearchParams(window.location.search).get("isStandAlone")){document.body.classList.add("standalone");const t=document.querySelector(".container");t&&t.classList.add("standalone")}!function(t){if(e)return;const n=document.getElementById("bankSelect"),s=document.getElementById("statsBankSelect");n||s?(Object.keys(t).filter(e=>Array.isArray(t[e])).sort().forEach(t=>{if(n){const e=document.createElement("option");e.value=t,e.textContent=c(t),n.appendChild(e)}if(s){const e=document.createElement("option");e.value=t,e.textContent=c(t),s.appendChild(e)}}),e=!0):console.warn("Bank select elements not found")}(t);try{const e=localStorage.getItem("lastBank");if(e){const n=document.getElementById("bankSelect");n&&t[e]&&(n.value=e)}}catch(l){console.warn("Failed to load lastBank",l)}r.initPdfViewer()}(),(new class{container;history;constructor(){this.container=null,this.history=this.getPracticeHistory()}render(t){this.container=document.getElementById(t),this.container?(this.container.innerHTML=this.generateHTML(),this.attachEventListeners()):console.warn("Practice history container not found:",t)}generateHTML(){return 0===this.history.totalTests?'\n        <div class="practice-history-empty">\n          <div class="empty-state">\n            <div class="empty-icon">ðŸ“Š</div>\n            <h3>No Practice Tests Yet</h3>\n            <p>Complete your first practice test to see your results here!</p>\n            <button class="btn btn-primary" id="startFirstTest">Start Your First Test</button>\n          </div>\n        </div>\n      ':`\n      <div class="practice-history">\n        <div class="history-header">\n          <h2>ðŸ“Š Practice Test History</h2>\n          <button class="btn btn-secondary btn-sm" id="clearHistory">Clear History</button>\n        </div>\n\n        <div class="history-stats">\n          <div class="stat-card">\n            <div class="stat-number">${this.history.totalTests}</div>\n            <div class="stat-label">Total Tests</div>\n          </div>\n          <div class="stat-card">\n            <div class="stat-number">${this.history.averageScore}%</div>\n            <div class="stat-label">Average Score</div>\n          </div>\n          <div class="stat-card">\n            <div class="stat-number">${this.history.bestScore}%</div>\n            <div class="stat-label">Best Score</div>\n          </div>\n          <div class="stat-card">\n            <div class="stat-number">${Math.round(this.history.totalTime)}m</div>\n            <div class="stat-label">Total Time</div>\n          </div>\n        </div>\n      </div>\n    `}attachEventListeners(){if(!this.container)return;const t=this.container.querySelector("#clearHistory");t&&t.addEventListener("click",()=>{confirm("Are you sure you want to clear all practice history? This cannot be undone.")&&(this.clearPracticeHistory(),this.history=this.getPracticeHistory(),this.render(this.container.id))});const e=this.container.querySelector("#startFirstTest");e&&e.addEventListener("click",()=>{const t=document.getElementById("practiceBtn");t&&t.scrollIntoView({behavior:"smooth"})})}getPracticeHistory(){try{const t=localStorage.getItem("practice_history");if(!t)return{...o};const e=JSON.parse(t);return this.calculateHistoryStats(e.results||[])}catch(t){return console.warn("Failed to load practice history:",t),{...o}}}calculateHistoryStats(t){const e=t.length,n=t.reduce((t,e)=>t+e.score,0),s=e>0?Math.round(n/e*100)/100:0,a=t.length>0?Math.max(...t.map(t=>t.score)):0,r=t.reduce((t,e)=>t+e.duration,0);return{results:t,totalTests:e,averageScore:s,bestScore:a,totalTime:r}}clearPracticeHistory(){try{localStorage.removeItem("practice_history"),this.history={...o}}catch(t){console.warn("Failed to clear practice history:",t)}}refresh(){this.history=this.getPracticeHistory(),this.container&&this.render(this.container.id)}}).render("practiceHistory")}}});
//# sourceMappingURL=main-legacy-BOTvfwTU.js.map
