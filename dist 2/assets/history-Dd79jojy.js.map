{"version":3,"file":"history-Dd79jojy.js","sources":["../../src/utils/answers.ts","../../static/question_renderer.ts","../../src/utils/history.ts"],"sourcesContent":["import type { Question } from '@/types/question';\n\nexport function evaluateAnswer(question: Question, userAnswer: string): boolean {\n  if (!question || !userAnswer) {\n    return false;\n  }\n\n  if (question.is_free) {\n    return (\n      userAnswer.toLowerCase().trim() ===\n      question.correct_answer.toLowerCase().trim()\n    );\n  }\n\n  if (question.is_calculation) {\n    const userNum = parseFloat(userAnswer);\n    const correctNum =\n      question.correct_answer_number ?? parseFloat(question.correct_answer);\n    if (isNaN(userNum) || isNaN(correctNum)) {\n      return false;\n    }\n    const tolerance = Math.abs(correctNum * 0.05); // 5% tolerance\n    return Math.abs(userNum - correctNum) <= tolerance;\n  }\n\n  const correctAnswerNumber = question.correct_answer_number;\n  if (correctAnswerNumber === undefined || correctAnswerNumber === null) {\n    return false;\n  }\n  return parseInt(userAnswer) === correctAnswerNumber;\n}\n\nexport function getCorrectAnswerText(question: Question): string {\n  if (question.is_calculation) {\n    return question.correct_answer || 'Calculation required';\n  }\n\n  const correctAnswerNumber = question.correct_answer_number;\n  if (\n    correctAnswerNumber !== undefined &&\n    correctAnswerNumber !== null &&\n    question.answers\n  ) {\n    const correctAnswer = question.answers.find(\n      a => a.answer_number === correctAnswerNumber\n    );\n    return correctAnswer ? correctAnswer.text : question.correct_answer || 'Unknown';\n  }\n\n  return question.correct_answer || 'Unknown';\n}\n\nexport function formatExplanation(explanation: string): string {\n  if (!explanation) return '';\n  \n  // Convert \\r\\n\\r\\n to double line breaks and \\r\\n to single line breaks\n  return explanation\n    .replace(/\\r\\n\\r\\n/g, '<br><br>')\n    .replace(/\\r\\n/g, '<br>')\n    .replace(/\\n\\n/g, '<br><br>')\n    .replace(/\\n/g, '<br>');\n}\n\n","import type { Question } from '@/types/question';\n\ninterface RenderOptions {\n  text?: string;\n  title?: string;\n  img?: string;\n  options?: string;\n  input?: string;\n  unit?: string;\n  feedback?: string;\n  answer?: string;\n  explanation?: string;\n  showInput?: boolean;\n  reviewMode?: boolean;\n  userAnswer?: string;\n}\n\ninterface QuestionRenderer {\n  initPdfViewer(): void;\n  renderQuestion(question: Question, config?: RenderOptions): void;\n  displayAnswer(question: Question, mode: 'check' | 'reveal' | 'hide', userAnswer?: string): 'checked' | 'revealed' | 'hidden';\n  getCurrentDisplayState(): 'hidden' | 'checked' | 'revealed';\n}\n\nfunction sanitize(content: string, inline: boolean = false): string {\n  if (typeof (window as any).DOMPurify !== 'undefined' && typeof (window as any).marked !== 'undefined') {\n    try {\n      const rawHtml = inline ? \n        (window as any).marked.parseInline(content) : \n        (window as any).marked.parse(content);\n      return (window as any).DOMPurify.sanitize(rawHtml);\n    } catch (e) {\n      console.warn('Error processing markdown:', e);\n      return content;\n    }\n  }\n  return content;\n}\n\nfunction get(selector?: string): HTMLElement | null {\n  return selector ? document.querySelector(selector) : null;\n}\n\nfunction enhanceLinksAndImages(element: HTMLElement): void {\n  // Handle internal resource images\n  const images = element.querySelectorAll('img[src^=\"resources/\"]');\n  images.forEach((img) => {\n    const imgEl = img as HTMLImageElement;\n    imgEl.style.cursor = 'pointer';\n    imgEl.onclick = () => window.open(imgEl.src, '_blank');\n  });\n\n  // Handle links that should open PDFs\n  const links = element.querySelectorAll('a[href$=\".pdf\"]');\n  links.forEach((link) => {\n    const linkEl = link as HTMLAnchorElement;\n    linkEl.target = '_blank';\n  });\n}\n\n// Main render function\nfunction renderQuestion(question: Question, config: RenderOptions = {}): void {\n  const {\n    text: textSelector = '#questionText',\n    title: titleSelector = '#questionTitle',\n    img: imgSelector = '#questionImage',\n    options: optionsSelector = '#answerOptions',\n    input: inputSelector = '#calculatorInput',\n    unit: unitSelector = '#answerUnit',\n    feedback: feedbackSelector = '#feedback',\n    answer: answerSelector = '#answer',\n    explanation: explanationSelector = '#explanation'\n  } = config;\n\n  const textEl = get(textSelector);\n  const titleEl = get(titleSelector);\n  const imgEl = get(imgSelector);\n  const optionsEl = get(optionsSelector);\n  const inputEl = get(inputSelector);\n  const unitEl = get(unitSelector);\n  const feedbackEl = get(feedbackSelector);\n  const answerEl = get(answerSelector);\n  const explanationEl = get(explanationSelector);\n  const showInput = config.showInput !== false;\n  const reviewMode = config.reviewMode || false;\n  const userAnswer = config.userAnswer || '';\n\n  if (titleEl) {\n    const rawTitle = question.title || '';\n    const needsBlock = /\\n/.test(rawTitle) || /(^|\\n)\\s*\\*\\s/.test(rawTitle);\n    const title = sanitize(rawTitle, !needsBlock);\n    if (typeof (window as any).DOMPurify !== 'undefined' && typeof (window as any).marked !== 'undefined') {\n      titleEl.innerHTML = title;\n    } else {\n      titleEl.textContent = title;\n    }\n    enhanceLinksAndImages(titleEl);\n  }\n  \n  if (textEl) {\n    const txt = sanitize(question.text || '', false);\n    if (typeof (window as any).DOMPurify !== 'undefined' && typeof (window as any).marked !== 'undefined') {\n      textEl.innerHTML = txt;\n    } else {\n      textEl.textContent = txt;\n    }\n    enhanceLinksAndImages(textEl);\n  }\n\n  if (imgEl && question.resource_image) {\n    (imgEl as HTMLImageElement).src = question.resource_image;\n    imgEl.style.display = '';\n    imgEl.style.cursor = 'pointer';\n    (imgEl as HTMLImageElement).onclick = () => window.open(question.resource_image!, '_blank');\n  } else if (imgEl) {\n    imgEl.style.display = 'none';\n  }\n\n  if (optionsEl && question.answers && question.answers.length > 0) {\n    optionsEl.innerHTML = '';\n    optionsEl.style.display = '';\n    \n    question.answers.forEach((answer) => {\n      const label = document.createElement('label');\n      const span = document.createElement('span');\n      span.textContent = answer.text;\n      \n      label.appendChild(span);\n      \n             if (reviewMode) {\n         // In review mode, highlight answers based on user selection and correctness\n         const isUserSelected = userAnswer === answer.answer_number.toString();\n         const isCorrect = question.correct_answer_number === answer.answer_number;\n         \n         if (isUserSelected) {\n           label.classList.add('user-selected');\n         }\n         \n         if (isCorrect) {\n           label.classList.add('correct-answer');\n         } else if (isUserSelected) {\n           label.classList.add('incorrect-answer');\n         }\n       } else {\n        // Normal mode - add radio button and click handlers\n        const radio = document.createElement('input');\n        radio.type = 'radio';\n        radio.name = 'answer';\n        radio.value = answer.answer_number.toString();\n        radio.dataset.answer = answer.text;\n        \n        label.insertBefore(radio, span);\n        \n        // Add click handler for the new styling with deselection\n        label.addEventListener('click', (e) => {\n          e.preventDefault();\n          \n          // Check if this label is already selected\n          const isCurrentlySelected = label.classList.contains('selected');\n          \n          // Remove selected class from all labels\n          const allLabels = optionsEl.querySelectorAll('label');\n          allLabels.forEach(l => l.classList.remove('selected'));\n          \n          if (!isCurrentlySelected) {\n            // Add selected class to clicked label\n            label.classList.add('selected');\n            \n            // Check the radio button (for compatibility with existing code)\n            radio.checked = true;\n            \n            // Trigger change event for existing handlers\n            radio.dispatchEvent(new Event('change', { bubbles: true }));\n          } else {\n            // Deselect the radio button\n            radio.checked = false;\n            \n            // Trigger change event for existing handlers\n            radio.dispatchEvent(new Event('change', { bubbles: true }));\n          }\n        });\n      }\n      \n      optionsEl!.appendChild(label);\n    });\n  }\n\n  if (inputEl && question.is_calculation) {\n    inputEl.style.display = showInput ? '' : 'none';\n    if (showInput) {\n      const input = inputEl.querySelector('input') as HTMLInputElement;\n      if (input) {\n        input.value = '';\n        input.focus();\n      }\n    }\n  }\n\n  if (unitEl && question.answer_unit) {\n    unitEl.textContent = question.answer_unit;\n    unitEl.style.display = showInput ? '' : 'none';\n  }\n\n  // Reset feedback elements and display state\n  if (feedbackEl) {\n    feedbackEl.textContent = '';\n    feedbackEl.className = 'feedback';\n    feedbackEl.style.display = 'none';\n  }\n  if (answerEl) {\n    answerEl.innerHTML = '';\n    answerEl.className = 'answer';\n    answerEl.style.display = 'none';\n  }\n  if (explanationEl) {\n    explanationEl.innerHTML = '';\n    explanationEl.className = 'explanation';\n    explanationEl.style.display = 'none';\n  }\n  \n  // Reset the global display state\n  currentDisplayState = 'hidden';\n  updateButtons();\n}\n\n\n\n// Global state for answer display\nlet currentDisplayState: 'hidden' | 'checked' | 'revealed' = 'hidden';\n\nfunction initPdfViewer(): void {\n  // Initialize PDF viewer functionality\n  // This can be expanded based on your PDF viewing requirements\n  console.log('PDF viewer initialized');\n}\n\nfunction displayAnswer(question: Question, mode: 'check' | 'reveal' | 'hide', userAnswer?: string): 'checked' | 'revealed' | 'hidden' {\n  const feedbackEl = document.getElementById('feedback');\n  const answerEl = document.getElementById('answer');\n  const explanationEl = document.getElementById('explanation');\n\n  if (mode === 'hide') {\n    // Hide all content\n    [feedbackEl, answerEl, explanationEl].forEach(el => {\n      if (el) {\n        el.textContent = '';\n        el.className = el.id;\n        el.style.display = 'none';\n      }\n    });\n    currentDisplayState = 'hidden';\n    updateButtons();\n    return 'hidden';\n  }\n\n  if (mode === 'check') {\n    if (!userAnswer) {\n      alert('Please select an answer first');\n      return currentDisplayState as 'checked' | 'revealed' | 'hidden';\n    }\n    \n    const evaluateAnswerFn = (window as any).evaluateAnswer;\n    if (!evaluateAnswerFn) {\n      console.warn('evaluateAnswer function not available');\n      return currentDisplayState as 'checked' | 'revealed' | 'hidden';\n    }\n    const isCorrect = evaluateAnswerFn(question, userAnswer);\n    \n    // Check mode: ONLY show feedback (correct/incorrect)\n    if (feedbackEl) {\n      feedbackEl.textContent = isCorrect ? 'Correct!' : 'Incorrect';\n      feedbackEl.className = isCorrect ? 'feedback correct' : 'feedback incorrect';\n      feedbackEl.style.display = 'block';\n    }\n    \n    // Hide answer and explanation in check mode\n    if (answerEl) {\n      answerEl.style.display = 'none';\n    }\n    if (explanationEl) {\n      explanationEl.style.display = 'none';\n    }\n    \n    currentDisplayState = 'checked';\n  } else if (mode === 'reveal') {\n    // Reveal mode: show answer + explanation, hide feedback\n    if (feedbackEl) {\n      feedbackEl.textContent = '';\n      feedbackEl.className = 'feedback';\n      feedbackEl.style.display = 'none';\n    }\n    \n    // Show answer and explanation\n    if (answerEl) {\n      const correctAnswerText = (window as any).getCorrectAnswerText?.(question) ?? 'Unknown';\n      answerEl.innerHTML = `<strong>Correct Answer:</strong> ${correctAnswerText}${question.answer_unit ? ' ' + question.answer_unit : ''}`;\n      answerEl.style.display = 'block';\n    }\n\n    if (explanationEl && question.why) {\n      const formattedExplanation = (window as any).formatExplanation?.(question.why) ?? question.why;\n      explanationEl.innerHTML = `<strong>Explanation:</strong> ${formattedExplanation}`;\n      explanationEl.style.display = 'block';\n    }\n    \n    currentDisplayState = 'revealed';\n  }\n\n  updateButtons();\n  return currentDisplayState;\n}\n\nfunction getCurrentDisplayState(): 'hidden' | 'checked' | 'revealed' {\n  return currentDisplayState;\n}\n\nfunction updateButtons(): void {\n  const checkBtn = document.getElementById('checkBtn') as HTMLButtonElement;\n  const revealBtn = document.getElementById('revealBtn') as HTMLButtonElement;\n  \n  if (!checkBtn || !revealBtn) {\n    return;\n  }\n\n  switch (currentDisplayState) {\n    case 'hidden':\n      checkBtn.textContent = 'Check';\n      revealBtn.textContent = 'Reveal';\n      break;\n    case 'checked':\n      checkBtn.textContent = 'Hide';\n      revealBtn.textContent = 'Reveal';\n      break;\n    case 'revealed':\n      checkBtn.textContent = 'Check';\n      revealBtn.textContent = 'Hide';\n      break;\n  }\n}\n\n// Create the question renderer object\nexport const questionRenderer: QuestionRenderer = {\n  initPdfViewer,\n  renderQuestion,\n  displayAnswer,\n  getCurrentDisplayState\n};\n","import type { PracticeHistory } from '@/types/question';\n\nexport const EMPTY_HISTORY: PracticeHistory = {\n  results: [],\n  totalTests: 0,\n  averageScore: 0,\n  bestScore: 0,\n  totalTime: 0\n};\n"],"names":["evaluateAnswer","question","userAnswer","is_free","toLowerCase","trim","correct_answer","is_calculation","userNum","parseFloat","correctNum","_a","correct_answer_number","isNaN","tolerance","Math","abs","correctAnswerNumber","parseInt","getCorrectAnswerText","answers","correctAnswer","find","a","answer_number","text","formatExplanation","explanation","replace","sanitize","content","inline","window","DOMPurify","marked","rawHtml","parseInline","parse","e","console","warn","get","selector","document","querySelector","enhanceLinksAndImages","element","querySelectorAll","forEach","img","imgEl","style","cursor","onclick","open","src","link","target","currentDisplayState","updateButtons","checkBtn","getElementById","revealBtn","textContent","questionRenderer","initPdfViewer","log","renderQuestion","config","textSelector","title","titleSelector","imgSelector","options","optionsSelector","input","inputSelector","unit","unitSelector","feedback","feedbackSelector","answer","answerSelector","explanationSelector","textEl","titleEl","optionsEl","inputEl","unitEl","feedbackEl","answerEl","explanationEl","showInput","reviewMode","rawTitle","test","innerHTML","txt","resource_image","display","length","label","createElement","span","appendChild","isUserSelected","toString","isCorrect","classList","add","radio","type","name","value","dataset","insertBefore","addEventListener","preventDefault","isCurrentlySelected","contains","l","remove","checked","dispatchEvent","Event","bubbles","focus","answer_unit","className","displayAnswer","mode","el","id","alert","evaluateAnswerFn","correctAnswerText","_b","call","concat","why","formattedExplanation","_d","_c","getCurrentDisplayState","EMPTY_HISTORY","results","totalTests","averageScore","bestScore","totalTime"],"mappings":"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"}